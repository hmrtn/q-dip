{"version":3,"sources":["contracts/external_contracts.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/Elections.jsx","views/Voting.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx"],"names":["ERC20ABI","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","DAIABI","internalType","module","exports","contracts","DAI","address","abi","UNI","GTC","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","body","obj","errorObj","Blockie","AddressInput","scan","setScan","currentValue","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","autoComplete","autoFocus","placeholder","prefix","width","EtherInput","addonAfter","mode","setMode","display","setDisplay","option","title","usdValue","possibleNewValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","marginTop","shape","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","contract","customContract","account","show","displayedContractFunctions","interface","functions","filter","contractDisplay","isQueryable","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","position","right","bottom","checked","isChecked","dark","light","Elections","mainnetContracts","yourLocalBalance","readContracts","writeContracts","numElections","setNumElections","tableDataSrc","setTableDataSrc","newElecName","setNewElecName","newElecAllocatedVotes","setNewElecAllocatedVotes","newElecAllocatedFunds","setNewElecAllocatedFunds","isModalVisible","setIsModalVisible","isCreating","setIsCreating","Form","useForm","route_history","useHistory","columns","dataIndex","align","render","admin","roles","r","record","index","viewElection","Diplomacy","init","addEventListener","onElectionCreated","onBallotCast","updateView","eventName","removeListener","eventBlockNum","_lastBlockNumber","resetFields","slider","goTo","setTableDataLoading","i","getElectionById","election","n_addr","getElectionVoted","n_voted","isActive","created_date","createdAt","toISOString","substring","canVote","n_workers","reverse","onFinish","addresses","newElection","fundsType","update","setAddresses","tableDataLoading","setFundsType","table_state","selectFundsType","labelCol","wrapperCol","initialValues","remember","ref","afterChange","speed","dots","ghost","justifyContent","alignItems","Item","label","rules","required","allowClear","pattern","RegExp","addonBefore","funds","isNaN","Number","toWei","toString","next","onBack","prev","overflow","itemLayout","dataSource","renderItem","item","updatedAddresses","splice","column","adr","htmlType","border","extra","pagination","pageSize","Voting","useParams","elecName","setElecName","setTotalVotes","totalFunds","setTotalFunds","remainTokens","setRemainTokens","alreadyVoted","setAlreadyVoted","canEndElection","setCanEndElection","canVoteElection","setCanVoteElection","isElectionActive","setIsElectionActive","isElecPayoutComplete","setIsElecPayoutComplete","isVoting","setIsVoting","voting_columns","idx","n_votes","voted_columns","payout","ethToPay","fromWei","onElectionEnded","onElectionPaid","msg","pop","voter","isCreator","electionCandidates","candidates","isCandidate","paid","ethFund","votes","hasVoted","addr","getElectionScores","scores","scoresSum","b","score","calculatePayout","forEach","p","castVotes","adrs","Math","sqrt","castBallot","payoutInfo","electionFundsEth","electionScoresSum","sqrdSumScore","payoutRatio","candidate","candidateScores","candidateSqrdSumScore","pow","x","y","d","String","d_num","endElection","payoutTokens","fundingType","payoutElection","back","split","Subgraph","targetNetwork","DEBUG","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","logo","connector","enable","App","_network","setInjectedProvider","clearCachedProvider","disconnect","setPrice","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","setGasPrice","loadGasPrice","axios","get","response","newGasPrice","catch","useGasPrice","localChainId","selectedChainId","faucetTx","yourMainnetBalance","startBlock","updates","setUpdates","resetEventsBlock","messages","useEventListener","networkDisplay","networkSelected","networkLocal","zIndex","top","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","code","reason","setRoute","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","selectedKeys","exact","path","left","gutter","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"ojkBAAA,IAAMA,EAAW,CACf,CACEC,UAAU,EACVC,OAAQ,GACRC,KAAM,OACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,WACNE,KAAM,WAER,CACEF,KAAM,SACNE,KAAM,YAGVF,KAAM,UACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,cACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,QACNE,KAAM,WAER,CACEF,KAAM,MACNE,KAAM,WAER,CACEF,KAAM,SACNE,KAAM,YAGVF,KAAM,eACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,WACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,UAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,SACNE,KAAM,YAGVF,KAAM,YACNC,QAAS,CACP,CACED,KAAM,UACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,SACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,MACNE,KAAM,WAER,CACEF,KAAM,SACNE,KAAM,YAGVF,KAAM,WACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,SACNE,KAAM,WAER,CACEF,KAAM,WACNE,KAAM,YAGVF,KAAM,YACNC,QAAS,CACP,CACED,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEC,SAAS,EACTC,gBAAiB,UACjBF,KAAM,YAER,CACEG,WAAW,EACXN,OAAQ,CACN,CACEO,SAAS,EACTN,KAAM,QACNE,KAAM,WAER,CACEI,SAAS,EACTN,KAAM,UACNE,KAAM,WAER,CACEI,SAAS,EACTN,KAAM,QACNE,KAAM,YAGVF,KAAM,WACNE,KAAM,SAER,CACEG,WAAW,EACXN,OAAQ,CACN,CACEO,SAAS,EACTN,KAAM,OACNE,KAAM,WAER,CACEI,SAAS,EACTN,KAAM,KACNE,KAAM,WAER,CACEI,SAAS,EACTN,KAAM,QACNE,KAAM,YAGVF,KAAM,WACNE,KAAM,UAGJK,EAAS,CACb,CACER,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,WACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,eAER,CACEG,WAAW,EACXN,OAAQ,CACN,CACEO,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,WACNE,KAAM,SAER,CACEG,WAAW,EACXN,OAAQ,CACN,CACEO,SAAS,EACTE,aAAc,SACdR,KAAM,MACNE,KAAM,UAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,OACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,OACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,QACdR,KAAM,OACNE,KAAM,UAGVF,KAAM,UACNE,KAAM,SAER,CACEG,WAAW,EACXN,OAAQ,CACN,CACEO,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEI,SAAS,EACTE,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,WACNE,KAAM,SAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,mBACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,kBACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,GACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVF,KAAM,YACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,UACNC,QAAS,CACP,CACEO,aAAc,OACdR,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVF,KAAM,YACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,WACNC,QAAS,CACP,CACEO,aAAc,QACdR,KAAM,GACNE,KAAM,UAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,OACNC,QAAS,CACP,CACEO,aAAc,SACdR,KAAM,GACNE,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVF,KAAM,SACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,SACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,UACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,QACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,SACNE,KAAM,WAER,CACEM,aAAc,OACdR,KAAM,UACNE,KAAM,QAER,CACEM,aAAc,QACdR,KAAM,IACNE,KAAM,SAER,CACEM,aAAc,UACdR,KAAM,IACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,IACNE,KAAM,YAGVF,KAAM,SACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,OACNC,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,SACNC,QAAS,CACP,CACEO,aAAc,SACdR,KAAM,GACNE,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,cACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,WACNC,QAAS,CACP,CACEO,aAAc,OACdR,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,WAER,CACEM,aAAc,UACdR,KAAM,MACNE,KAAM,YAGVF,KAAM,eACNC,QAAS,CACP,CACEO,aAAc,OACdR,KAAM,GACNE,KAAM,SAGVC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,GACRC,KAAM,UACNC,QAAS,CACP,CACEO,aAAc,SACdR,KAAM,GACNE,KAAM,WAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEJ,UAAU,EACVC,OAAQ,CACN,CACES,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVF,KAAM,QACNC,QAAS,CACP,CACEO,aAAc,UACdR,KAAM,GACNE,KAAM,YAGVC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,aAKVO,EAAOC,QAAU,CACf,EAAG,CACDC,UAAW,CACTC,IAAK,CACHC,QAAS,6CACTC,IAAKP,GAEPQ,IAAK,CACHF,QAAS,6CACTC,IAAKjB,GAEPmB,IAAK,CACHH,QAAS,6CACTC,IAAKjB,KAIX,EAAG,CACDc,UAAW,CACTC,IAAK,CACHC,QAAS,6CACTC,IAAKP,GAEPQ,IAAK,CACHF,QAAS,6CACTC,IAAKjB,O,6cCvyBE,SAASoB,EAAWC,EAAUC,EAAIC,GAC/C,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WACR,GAAIJ,GAAMD,EAAU,CAClB,IAAMO,EAAW,SAAAC,GAGXN,GAAQA,EAAKO,OAAS,EACxBN,EAAcG,QAAd,MAAAH,EAAa,YAAYD,IAEzBC,EAAcG,WAMlB,OAFAN,EAASU,GAAG,QAASH,GAEd,WACLP,EAASW,IAAI,QAASJ,OAGzB,CAACP,IC3BS,SAASY,EAAUX,EAAIY,EAAOC,GAC3C,IAAMX,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVQ,EAAgB,CAClB,IAAME,EAAKC,aAJb,WACEb,EAAcG,YAGeO,GAC7B,OAAO,kBAAMI,cAAcF,OAE5B,CAACF,IAEJR,qBAAU,WACRJ,MACC,CAACa,ICFS,SAASI,EAAWlB,EAAUL,GAAwB,IAAfwB,EAAc,uDAAH,EAC/D,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAcC,sBAAW,uCAC7B,WAAOxB,EAAUL,GAAjB,eAAA8B,EAAA,0DACMzB,IAAYL,EADlB,gCAE6BK,EAAS0B,WAAW/B,GAFjD,QAEUgC,EAFV,UAGuBN,GACjBC,EAAWK,GAJjB,2CAD6B,wDAS7B,CAAC3B,EAAUL,IA2Bb,OAvBAI,EAAwB,IAAboB,GAAkBnB,GAAU,WACjCA,GAAYL,GAAwB,IAAbwB,GACzBI,EAAYvB,EAAUL,MAK1BU,qBAAU,WACJV,GAAWK,GAAUuB,EAAYvB,EAAUL,KAC9C,CAACA,EAASK,EAAUuB,IAGvBX,EAAS,sBACP,sBAAAa,EAAA,sDACMzB,GAAYL,GAAWwB,EAAW,GAEpCI,IAHJ,2CAMAJ,EACAnB,GAAYL,GAGP0B,E,aCxBMO,EAnBoB,SAAC5B,EAAU6B,GAC5C,MAAoDT,oBAAS,GAA7D,mBAAOU,EAAP,KAA2BC,EAA3B,KAeA,OAVA1B,qBAAU,WAER,IAAM2B,EAAe,uCAAG,4BAAAP,EAAA,yDACjBQ,QAAMC,UAAUL,GADC,0CACwB,GADxB,uBAEC7B,EAASmC,QAAQN,GAFlB,OAEhBO,EAFgB,OAGtBL,EAAmC,QAAbK,GAHA,2CAAH,qDAKjBpC,GAAUgC,MACb,CAAChC,EAAU6B,IAEPC,G,QC/BDO,EAAWC,EAAQ,IAAnBD,OA+BO,SAASE,EAAkBC,GAAgC,IAAdC,EAAa,uDAAJ,GACnE,EAAkCrB,qBAAlC,mBAAO3B,EAAP,KAAkBiD,EAAlB,KAEMC,EAAoBF,EAAOG,iBAAmBC,OAAOC,KAAKL,EAAOG,iBAAiBG,OAClFC,EAAsBP,EAAOG,iBAAmBC,OAAOI,OAAOR,EAAOG,iBAAiBG,OAsF5F,OApFA1C,qBAAU,WACR,IAAI6C,GAAS,EADC,4CAGd,8CAAAzB,EAAA,0DACMe,GAAgD,qBAArBA,EADjC,oBAEIW,QAAQC,IAAR,qBAFJ,UASUZ,GAA6D,oBAAlCA,EAAiBa,aATtD,gCAUyBb,EAAiBa,eAV1C,OAUQC,EAVR,qBAaUjB,EAAOkB,OAAOC,SAAShB,GAEzBxC,GADAyD,EAASjB,GACSxC,SACTsD,GAAYA,EAAS7C,OAAS,GACvCgD,EAASjB,EAAiBkB,YAC1B1D,EAAWwC,IAEXiB,EAASjB,EACTxC,EAAWwC,GArBnB,UAwBoCxC,EAAS2D,aAxB7C,QAwBYC,EAxBZ,OA0BYC,EAAWpB,EAAOqB,SAAWF,EAAgBE,QAE/CC,EAAe,GACfC,EAAuB,GAC3B,IACED,EAAetB,EAAOwB,kBAAoB3B,EAAQ,MAClD,MAAO4B,GACPf,QAAQC,IAAIc,GAEd,IACEF,EAAuBvB,EAAO0B,mBAAqB7B,EAAQ,MAC3D,MAAO4B,GACPf,QAAQC,IAAIc,GAKd,GAFIE,EAAoB,GAEpBL,EAAaF,GACf,IAAWQ,KAAkBN,EAAaF,GACpChB,OAAOyB,UAAUC,eAAeC,KAAKT,EAAaF,GAAWQ,KAC1D5B,EAAOgC,oBAAsBJ,IAAmB5B,EAAOgC,qBAC1DL,EAAiB,2BACZA,GACAL,EAAaF,GAAUQ,GAAgB5E,aAOhDuE,EAAqBH,KACvBO,EAAiB,2BAAQA,GAAsBJ,EAAqBH,GAAUpE,YAG1EiF,EAAe7B,OAAOC,KAAKsB,GAAmBO,QAAO,SAACC,EAAaC,GACvE,IAAMC,EACJrC,EAAOG,iBAAmBC,OAAOC,KAAKL,EAAOG,iBAAiBmC,SAASF,GACnEpC,EAAOG,gBAAgBiC,GACvBT,EAAkBS,GAAclF,QAEtC,OADAiF,EAAYC,GAAgB,IAAIxC,EAAO2C,SAASF,EAAUV,EAAkBS,GAAcjF,IAAK6D,GACxFmB,IACN,IACC1B,GAAQR,EAAagC,GApE/B,kDAsEMvB,QAAQC,IAAI,4BAAZ,MAtEN,2DAHc,sBA+Ed,OA/Ec,mCA6Ed6B,GAEO,WACL/B,GAAS,KAEV,CAACV,EAAkBC,EAAOqB,QAASrB,EAAOgC,mBAAoB9B,EAAmBK,IAE7EvD,ECpGM,SAASyF,EAAkBzF,EAAWoF,EAAcM,EAAcjF,EAAMiB,EAAUiE,EAAWC,GAAW,IAAD,OAChHC,EAAiB,EACjBnE,EACFmE,EAAiBnE,EACPA,GAA4B,kBAATjB,IAE7BoF,EAAiBpF,GAGnB,MAA0BkB,qBAA1B,mBAAOmE,EAAP,KAAcC,EAAd,KACA,EAA0BpE,oBAAS,GAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KAEArF,qBAAU,WACgB,oBAAbgF,GACTM,WAAWN,EAASO,KAAK,EAAML,GAAQ,KAExC,CAACA,EAAOF,IAEX,IAAMQ,EAAW,uCAAG,8BAAApE,EAAA,oEAIZvB,GAAQA,EAAKO,OAAS,GAJV,kCAKG,EAAAhB,EAAUoF,IAAcM,GAAxB,oBAAyCjF,IAL5C,OAKd4F,EALc,OAMdJ,GAAS,GANK,yCAUGjG,EAAUoF,GAAcM,KAV3B,QAUdW,EAVc,OAWdJ,GAAS,GAXK,QAaZN,GAAkC,oBAAdA,IACtBU,EAAWV,EAAUU,IAGnBA,IAAaP,GACfC,EAASM,GAlBK,kDAqBhB3C,QAAQC,IAAR,MArBgB,0DAAH,qDAiDjB,OAvBArD,EAAWN,GAAaA,EAAUoF,IAAoC,IAAnBS,GAAwB7F,EAAUoF,GAAc7E,UAAU,WACvGP,GAAaA,EAAUoF,IAAoC,IAAnBS,GAE1CO,OAKJjF,EAAS,sBACP,sBAAAa,EAAA,sDACMhC,GAAaA,EAAUoF,IAAiBS,EAAiB,GAE3DO,IAHJ,2CAMAP,EACA7F,GAAaA,EAAUoF,KAGX,IAAVY,GAAmBhG,GAAaA,EAAUoF,IAC5CgB,IAGKN,E,4CCxET,IAAMQ,EAAa,uCAAG,WAAO/F,EAAUL,GAAjB,iBAAA8B,EAAA,0DAChB9B,IAAWsC,QAAMC,UAAUvC,GADX,0CAMWK,EAAS+F,cAAcpG,GANlC,cAMVqG,EANU,gBAQchG,EAASiG,YAAYD,GARnC,UAQVE,EARU,QAUZvG,GAAWsC,QAAMkE,WAAWxG,KAAasC,QAAMkE,WAAWD,GAV9C,0CAWPF,GAXO,iCAaT/D,QAAMkE,WAAWxG,IAbR,2DAeTsC,QAAMkE,WAAWxG,IAfR,iCAkBb,GAlBa,0DAAH,wDAkDJyG,EA7BU,SAACpG,EAAUL,GAClC,MAA8ByB,mBAASzB,GAAvC,mBAAO0G,EAAP,KAAgBC,EAAhB,KAyBA,OAtBAjG,qBAAU,WACR,IAAIkG,EAAQC,OAAOC,aAAaC,QAAQ,YAAc/G,IACtD4G,EAAQA,GAASI,KAAKC,MAAML,KAEfA,EAAMM,UAAYC,KAAKC,MAClCT,EAAWC,EAAMzH,MACRkB,GACT+F,EAAc/F,EAAUL,GAASqH,MAAK,SAAAlI,GAChCA,IACFwH,EAAWxH,GACX0H,OAAOC,aAAaQ,QAClB,YAActH,EACdgH,KAAKO,UAAU,CACbL,UAAWC,KAAKC,MAAQ,KACxBjI,gBAMT,CAACkB,EAAUL,EAAS2G,IAEhBD,GChDT,IChBQhE,EAAWC,EAAQ,IAAnBD,OCkBR,IAkCe8E,EAlCO,SAACC,EAAkBC,GACvC,MAA4BjG,qBAA5B,mBAAOqC,EAAP,KAAe6D,EAAf,KACMC,EDlBO,SAAyBvH,GACtC,IAAMwH,EAAM,iBAEZ,EAA4BpG,qBAA5B,mBAAOqC,EAAP,KAAe6D,EAAf,KACA,EAAsClG,qBAAtC,mBAAOqG,EAAP,KAAoBC,EAApB,KAEMlC,EAAW,SAAAD,GACf,IACEmC,EAAenC,GACfiB,OAAOC,aAAaQ,QAAQO,EAAKjC,GACjC,MAAOoC,GACPxE,QAAQC,IAAIuE,KAwBhB,OApBAtH,qBAAU,WACR,IAAMuH,EAAYpB,OAAOC,aAAaC,QAAQc,GAC9C,GAAKI,EAMHpC,EAASoC,OANK,CACdzE,QAAQC,IAAI,wBACZ,IACMyE,EADaxF,EAAOyF,OAAOC,eACNC,WAC3BxC,EAASqC,MAIV,IAEHxH,qBAAU,WACR,GAAIoH,GAAezH,EAAU,CAE3B,IAAMiI,EADG,IAAI5F,EAAOyF,OAAOL,GACJS,QAAQlI,GAC/BsH,EAAUW,MAEX,CAACR,EAAazH,IAEVyD,ECjBc0E,CAAgBd,GA6BrC,OA3BAe,mBAAQ,WACN,GAAIhB,EAAkB,CACpBjE,QAAQC,IAAI,wCACZ,IAAMiF,EAAiBjB,EAAiBkB,YAAclB,EAAiB1D,YAAc0D,EACrFE,EAAUe,QACL,GAAKhB,EACP,CACH,GAAIb,OAAO+B,SAASC,UAAYhC,OAAO+B,SAASC,SAASC,QAAQ,QAAU,EAAG,CAC5E,IACIC,EADEC,EAAanC,OAAO+B,SAASK,KAAKC,QAAQ,IAAK,IAErD,GAA0B,KAAtBF,EAAWlI,QAAuC,KAAtBkI,EAAWlI,OAAe,CACxD0C,QAAQC,IAAI,wCACZsF,EAAQC,EACRnC,OAAOsC,QAAQC,UAAU,GAAI,GAAI,KACjC,IAAMC,EAAoBxC,OAAOC,aAAaC,QAAQ,kBAClDsC,GAAqBA,IAAsBN,GAC7ClC,OAAOC,aAAaQ,QAAQ,wBAA0BH,KAAKC,MAAOiC,GAEpExC,OAAOC,aAAaQ,QAAQ,iBAAkByB,IAIlDvF,QAAQC,IAAI,mCAA0BmE,GACtCD,EAAUC,QAlBeD,MAoB1B,CAACF,EAAkBC,EAAeE,IAE9B9D,G,OCpBDwF,EAASC,IAATD,KAKO,SAASE,EAAQC,GAC9B,IAAMzJ,EAAUyJ,EAAM7D,OAAS6D,EAAMzJ,QAE/B0J,EAAMjD,EAAiBgD,EAAME,YAAa3J,GAExC4J,EAAiBC,cAAjBD,aAER,IAAK5J,EACH,OACE,+BACE,cAAC,IAAD,CAAU8J,QAAM,EAACC,UAAW,CAAEC,KAAM,OAK1C,IAAIC,EAAiBjK,EAAQkK,OAAO,EAAG,GAEnCR,GAAOA,EAAIZ,QAAQ,MAAQ,EAC7BmB,EAAiBP,EACO,UAAfD,EAAMU,KACfF,GAAkB,MAAQjK,EAAQkK,QAAQ,GAClB,SAAfT,EAAMU,OACfF,EAAiBjK,GAGnB,IAgBIoK,EAhBEC,EA5BkB,SAACrK,EAASsK,GAAV,gBACrBA,GAAiB,wBAA0B,YADtB,OACmCtK,GA2BrCuK,CAAkBvK,EAASyJ,EAAMa,eACvD,OAAIb,EAAMe,UAEN,sBAAMC,MAAO,CAAEC,cAAe,UAA9B,SACE,mBACED,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAME,cAAC,IAAD,CAAUC,KAAM/K,EAAQgL,cAAeb,KAAM,EAAGc,MAAO,SAQ7Db,EADEX,EAAM/D,SAEN,cAAC4D,EAAD,CAAM4B,SAAU,CAAExF,SAAU+D,EAAM/D,UAAYyF,SAAU,CAAEf,KAAMpK,GAAhE,SACE,mBACEyK,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAMGb,MAML,cAACX,EAAD,CAAM6B,SAAU,CAAEf,KAAMpK,GAAxB,SACE,mBACEyK,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAMGb,MAOP,iCACE,sBAAMQ,MAAO,CAAEC,cAAe,UAA9B,SACE,cAAC,IAAD,CAAUK,KAAM/K,EAAQgL,cAAeb,KAAM,EAAGc,MAAOxB,EAAM2B,SAAW3B,EAAM2B,SAAW,EAAI,MAE/F,sBAAMX,MAAO,CAAEC,cAAe,SAAUW,YAAa,EAAGD,SAAU3B,EAAM2B,SAAW3B,EAAM2B,SAAW,IAApG,SACGhB,QC7GT,IAAQ9H,EAAUK,EAAQ,IAAlBL,MA4BO,SAASgJ,EAAQ7B,GAC9B,MAAoChI,oBAAS,GAA7C,mBAAO8J,EAAP,KAAmBC,EAAnB,KAIM9J,EAAUH,EAAWkI,EAAMpJ,SAAUoJ,EAAMzJ,SAE7CyL,EAAeC,WAAW,QAE1BC,EAAejK,EASnB,GAP6B,qBAAlB+H,EAAM/H,UACfiK,EAAelC,EAAM/H,SAEI,qBAAhB+H,EAAM7D,QACf+F,EAAelC,EAAM7D,OAGnB+F,EAAc,CAChB,IAAMC,EAAetJ,EAAMuJ,YAAYF,GACvCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpCE,EAAQvC,EAAMuC,OAASvC,EAAMwC,iBAMnC,OAJID,GAAST,IACXQ,EAAiB,KAAON,EAAeO,GAAOF,QAAQ,IAItD,sBACErB,MAAO,CACLC,cAAe,SACfU,SAAU3B,EAAMU,KAAOV,EAAMU,KAAO,GACpC+B,QAAS,EACTC,OAAQ,WAEVC,QAAS,WACPZ,GAAeD,IARnB,SAWGQ,I,gIC1EMM,GAAY,mCAQZC,GAAW,CACtBC,UAAW,CACTpN,KAAM,YACNwL,MAAO,UACPxG,QAAS,MACTmG,cAAe,GACfkC,OAAQ,UAAY3F,OAAO+B,SAAS6D,SAAW,SAEjDC,QAAS,CACPvN,KAAM,UACNwL,MAAO,UACPxG,QAAS,EACTqI,OAAO,gCAAD,OAAkCH,IACxC/B,cAAe,yBAEjBqC,MAAO,CACLxN,KAAM,QACNwL,MAAO,UACPxG,QAAS,GACTqI,OAAO,8BAAD,OAAgCH,IACtC/B,cAAe,8BACfsC,OAAQ,0CAEVC,QAAS,CACP1N,KAAM,UACNwL,MAAO,UACPxG,QAAS,EACTqI,OAAO,gCAAD,OAAkCH,IACxCO,OAAQ,6BACRtC,cAAe,iCAEjBwC,QAAS,CACP3N,KAAM,UACNwL,MAAO,UACPxG,QAAS,EACTyI,OAAQ,6BACRtC,cAAe,gCACfkC,OAAO,gCAAD,OAAkCH,KAE1CU,OAAQ,CACN5N,KAAM,SACNwL,MAAO,UACPxG,QAAS,EACTyI,OAAQ,kCACRtC,cAAe,+BACfkC,OAAO,+BAAD,OAAiCH,KAEzCW,KAAM,CACJ7N,KAAM,OACNwL,MAAO,UACPxG,QAAS,IACT6H,MAAO,EACPiB,SAAU,IACVT,OAAQ,0BACRI,OAAQ,2BACRtC,cAAe,oCAEjB4C,MAAO,CACL/N,KAAM,QACNwL,MAAO,UACPxG,QAAS,IACT6H,MAAO,EACPiB,SAAU,IACVT,OAAQ,qCACRI,OAAQ,gCACRtC,cAAe,6CAEjB6C,OAAQ,CACNhO,KAAM,SACNwL,MAAO,UACPxG,QAAS,MACT6H,MAAO,EACPiB,SAAU,IACVT,OAAQ,oCACRI,OAAQ,gCACRtC,cAAe,wCAEjB8C,cAAe,CACbjO,KAAM,gBACNwL,MAAO,UACPxG,QAAS,eACTmG,cAAe,GACfkC,OAAO,yBAETa,gBAAiB,CACflO,KAAM,kBACNwL,MAAO,UACPxG,QAAS,MACTmG,cAAe,GACfkC,OAAO,yBAETc,gBAAiB,CACfnO,KAAM,mBACNwL,MAAO,UACPxG,QAAS,OACTmG,cAAe,0CACfkC,OAAO,mCAETe,SAAU,CACRpO,KAAM,WACNwL,MAAO,UACPxG,QAAS,MACTmG,cAAe,kCACfkC,OAAO,+BACPS,SAAU,GAEZO,gBAAiB,CACfrO,KAAM,kBACNwL,MAAO,UACPxG,QAAS,MACTmG,cAAe,GACfkC,OAAQ,UAAY3F,OAAO+B,SAAS6D,SAAW,SAEjDgB,cAAe,CACbtO,KAAM,gBACNwL,MAAO,UACPxG,QAAS,IACTmG,cAAe,GACfkC,OAAQ,UAAY3F,OAAO+B,SAAS6D,SAAW,QAC/CQ,SAAU,GAEZS,cAAe,CACbvO,KAAM,gBACNwL,MAAO,UACPxG,QAAS,GACTmG,cAAe,yCACfkC,OAAO,4BACPS,SAAU,GAEZU,SAAU,CACRxO,KAAM,WACNwL,MAAO,UACPxG,QAAS,GACTmG,cAAe,mCACfkC,OAAO,gCAIEoB,GAAU,SAAAzJ,GACrB,IAAK,IAAM0J,KAAKvB,GACd,GAAIA,GAASuB,GAAG1J,UAAYA,EAC1B,OAAOmI,GAASuB,IClJdnL,GAAWC,EAAQ,IAAnBD,OAKFoL,GAAY,GAIH,SAASC,GAAWlL,EAAkBoK,EAAUe,GAC7D,GAAgC,qBAArBnL,EAET,8CAAO,WAAOoL,EAAIC,GAAX,yCAAApM,EAAA,0DAI4C,IAA7CY,GAAOkB,OAAOC,SAAShB,GAJtB,oBAKHxC,EAAWwC,EAAiBxC,SAC5ByD,EAASjB,EANN,KAOOA,EAAiBxC,UAPxB,qCAO2CwC,EAAiBxC,SAAS2D,aAPrE,0BAOHmK,EAPG,iCAQMtL,EAAiB8F,YARvB,wBASHtI,EAAWwC,EACXiB,EAASjB,EAAiBkB,YAVvB,UAWalB,EAAiBmB,aAX9B,QAWHmK,EAXG,kBAcL3K,QAAQC,IAAI,UAAW0K,GAEnBC,EAAU,KACVC,EAAS,KACVC,UAAUC,SACXH,EAAU,CACRI,OD7BwB,uCC8BxBC,OAAQ,WACRC,UAAWP,EAAQhK,QAEnBwK,mBAAoB,SAAAC,GACPpL,QAAQC,IAAI,YAAamL,GACpC,IAAMC,EAAmBf,GAAUc,EAAcE,YAAY7F,MAC7B,oBAArB4F,GACTA,EAAiBD,EAAcE,eAKrCT,EAASU,aAAOX,IAIdY,EAAmB,GACnBb,EAAQhP,MAAQgP,EAAQhK,QAAU,IACpC6K,EAAmBb,EAAQhP,KAAO,KAGhC8P,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBb,EAAQhK,UACV8K,EAAiB,uCA5Cd,YAiDChB,aAAciB,SAjDf,wBAkDU1L,QAAQC,IAAI,cAAewK,GAlDrC,UAmDcA,EAnDd,QAmDDkB,EAnDC,sCAqDIlB,EAAGhB,WACNgB,EAAGhB,SAAWA,GAAYvK,GAAOJ,MAAM8M,WAAW,MAAO,SAEtDnB,EAAGoB,WACNpB,EAAGoB,SAAW3M,GAAOJ,MAAMgN,QAAQ,OAE1B9L,QAAQC,IAAI,aAAcwK,GA3DpC,UA4DcnK,EAAOyL,gBAAgBtB,GA5DrC,QA4DDkB,EA5DC,kBA8DQ3L,QAAQC,IAAI,UAAW0L,GAG9BjB,IACFJ,GAAUqB,EAAOlG,MAAQiF,KAIvBG,GAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAKvF,QAAQqF,EAAQhK,UAAY,GAtE7D,mBAuEmBkK,EAAOpF,KAAKkG,EAAOlG,MAvEtC,EAuEOuG,QACAzO,GAAG,OAAO,SAAA+N,GAChB,MAAO,CACLW,QAAS,kBAAM5I,OAAO6I,MAAM1B,GAAaiB,GAAkBH,EAAY7F,WA1E1E,2BA8ED0G,KAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAaX,EAAOlG,KACpB8G,UAAW,iBAIT7B,EArFH,kCAsFwBD,EAtFxB,QAsFO+B,EAtFP,OAuFOC,EAAoB5O,YAAW,sBAAC,4BAAAS,EAAA,6DACpC0B,QAAQC,IAAI,qBAAsBuM,EAAU3P,GADR,SAEIA,EAAS6P,sBAAsBF,EAAS/G,MAF5C,QAE9BkH,EAF8B,SAGHA,EAA0BC,gBACzDlC,EAAS,2BAAK8B,GAAaG,IAC3B7O,cAAc2O,IALoB,2CAOnC,KA9FJ,WAkGwB,oBAAhBd,EAAOkB,KAlGf,kCAmGKlB,EAAOkB,OAnGZ,iCAsGIlB,GAtGJ,mCAwGQ3L,QAAQC,IAAR,MAEPoM,EAAU,KAAES,MAAQ,KAAEA,KAAKT,QAAU,KAAES,KAAKT,QAAU,KAAE7H,OAAShB,KAAKC,MAAMD,KAAKO,UAAU,KAAES,QAAQuI,KAAOvJ,KAAKC,MAAMD,KAAKC,MAAMD,KAAKO,UAAU,KAAES,QAAQuI,MAAMvI,MAAM6H,QAAU,KAAES,KAAO,KAAEA,KAAOtJ,KAAKO,UAAL,OACnM,KAAES,OAAS,KAAE6H,UACfA,EAAU,KAAEA,SAGdrM,QAAQC,IAAI,uBAAwBoM,GACpC,KACMW,EAAMxJ,KAAKC,MAAM4I,KACXW,EAAID,OACRE,EAAWzJ,KAAKC,MAAMuJ,EAAID,QACfE,EAASzI,OAASyI,EAASzI,MAAM6H,UAC9CA,EAAUY,EAASzI,MAAM6H,SAG9B,MAAMtL,IAIPoL,KAAa3H,MAAM,CACjB6H,QAAS,oBACTC,YAAaD,IAEX3B,GAAgC,oBAAbA,GACrBA,EAAS,EAAD,IAjIP,2DAAP,wD,0DCXW,SAASwC,GAAQjH,GAC9B,OAAKA,EAAMzJ,SAAgD,oBAA9ByJ,EAAMzJ,QAAQgL,YAIpC,cAAC,IAAD,aAAUD,KAAMtB,EAAMzJ,QAAQgL,eAAmBvB,IAH/C,yBC2BI,SAASkH,GAAalH,GACnC,MAA0BhI,mBAASgI,EAAM7D,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAwBpE,oBAAS,GAAjC,mBAAOmP,EAAP,KAAaC,EAAb,KAEMC,EAAsC,qBAAhBrH,EAAM7D,MAAwB6D,EAAM7D,MAAQA,EAClE8D,EAAMjD,YAAiBgD,EAAME,YAAamH,GAgBxCnH,GAPH,KAAcoH,GAAA,EACZC,GAAA,EAM2BvH,EAA1BE,aAAajE,EAAa+D,EAAb/D,SACfuL,EAAgBpP,sBAAW,uCAC/B,WAAMsE,GAAN,iBAAArE,EAAA,yDAC0B,qBAAbqE,EADb,uBAEQnG,EAAUmG,GACF2C,QAAQ,QAAU,GAAK9I,EAAQ8I,QAAQ,QAAU,GAHjE,0CAKsCa,EAAYrD,YAAYtG,GAL9D,QAKckR,EALd,UAOUlR,EAAUkR,GAPpB,0DAYIrL,EAAS7F,GACe,oBAAb0F,GACTA,EAAS1F,GAdf,0DAD+B,sDAmB/B,CAAC2J,EAAajE,IAGAkL,GAaX,KA0BL,OACE,8BAEE,cAAC,KAAD,CACEzG,KAAK,QACL/I,GAAG,YACHjC,KAAK,YACLgS,aAAa,QACbC,UAAW3H,EAAM2H,UACjBC,YAAa5H,EAAM4H,YAAc5H,EAAM4H,YAAc,UACrDC,OAAQ,cAACZ,GAAD,CAAS1Q,QAAS8Q,EAAc3G,KAAM,EAAGc,MAAO,IACxDrF,MAAO8D,GAAOoH,EACdrG,MAAO,CAAE8G,MAAO,KAChB7L,SAAU,SAAAnB,GACR0M,EAAc1M,EAAEqG,OAAOhF,YCrGlB,SAAS4L,GAAW/H,GACjC,IA+BI6H,EACAG,EAhCJ,EAAwBhQ,mBAASgI,EAAMuC,MAAQ,MAAQ,OAAvD,mBAAO0F,EAAP,KAAaC,EAAb,KACA,EAA8BlQ,qBAA9B,mBAAOmQ,EAAP,KAAgBC,EAAhB,KACA,EAA0BpQ,qBAA1B,mBAAOmE,EAAP,KAAcC,EAAd,KAEMiL,EAAsC,qBAAhBrH,EAAM7D,MAAwB6D,EAAM7D,MAAQA,EAElEkM,EAAS,SAAAC,GACb,OAAKtI,EAAMuC,MAET,qBACEvB,MAAO,CAAE0B,OAAQ,WACjBC,QAAS,WACP,GAAa,QAATsF,EACFC,EAAQ,OACRE,EAAWf,QAGX,GADAa,EAAQ,OACJb,EAAc,CAChB,IAAMkB,EAAW,IAAMtG,WAAWoF,GAAgBrH,EAAMuC,OAAOF,QAAQ,GACvE+F,EAAWG,QAEXH,EAAWf,IAZnB,SAiBGiB,IAnBoB,IAwC3B,MAda,QAATL,GACFJ,EAAS,IACTG,EAAaK,EAAO,sBAEpBR,EAAS,SACTG,EAAaK,EAAO,qBAGtBpR,qBAAU,WACHoQ,GACHe,EAAW,MAEZ,CAACf,IAGF,cAAC,KAAD,CACE3G,KAAK,QACLkH,YAAa5H,EAAM4H,YAAc5H,EAAM4H,YAAc,aAAeK,EACpEN,UAAW3H,EAAM2H,UACjBE,OAAQA,EACR1L,MAAOgM,EACPH,WAAYA,EACZ/L,SAAQ,uCAAE,WAAMnB,GAAN,mBAAAzC,EAAA,sDACFqE,EAAW5B,EAAEqG,OAAOhF,MACb,QAAT8L,GACIO,EAAmBvG,WAAWvF,KAE5B+L,EAAWD,EAAmBxI,EAAMuC,MAC1CnG,EAASqM,GACqB,oBAAnBzI,EAAM/D,UACf+D,EAAM/D,SAASwM,GAEjBL,EAAW1L,IAEX0L,EAAW1L,IAGbN,EAASM,GACqB,oBAAnBsD,EAAM/D,UACf+D,EAAM/D,SAASS,GAEjB0L,EAAW1L,IAnBL,2CAAF,wDC3Ed,IAAQmD,GAAoBC,IAApBD,KAAM6I,GAAc5I,IAAd4I,UA8BC,SAAShK,GAAOsB,GAC7B,MAA0ChI,qBAA1C,mBAAO2Q,EAAP,KAAsBC,EAAtB,KACA3R,qBAAU,WAAM,4CACd,4BAAAoB,EAAA,0DACM2H,EAAM3F,OADZ,gCAE6B2F,EAAM3F,OAAO0C,aAF1C,OAEU8L,EAFV,OAGID,EAAiBC,GAHrB,4CADc,uBAAC,WAAD,wBAOd9L,KACC,CAACiD,EAAM3F,SAEV,IA4BI8N,EACAW,EACAC,EA9BEC,EAAkBhJ,EAAMzJ,SAAWoS,EAEzC,EAAwB3Q,qBAAxB,mBAAOiO,EAAP,KAAagD,EAAb,KACA,EAAoBjR,qBAApB,mBAAOkR,EAAP,KAAWC,EAAX,KACA,EAA4BnR,qBAA5B,mBAAOoR,EAAP,KAAeC,EAAf,KACA,EAAkCrR,qBAAlC,mBAAOsR,EAAP,KAAkBC,EAAlB,KACA,EAAoBvR,qBAApB,mBAAOwR,EAAP,KAAWC,EAAX,KAEMC,EAAe1J,EAAMpJ,SACzB,cAAC,KAAD,CAAS0R,MAAM,SAAf,SACE,cAACqB,EAAA,EAAD,CACEhH,QAAS,WACPsG,GAAShD,IAEX2D,QAAS,GACT5I,MAAO,CACLyB,QAAS,EACTvB,MAAOlB,EAAMkB,MAAQlB,EAAMkB,MAAQ,GACnCwB,OAAQ,UACRf,SAAU,GACVV,cAAe,cAKrB,GAMF,GAAIiI,EACFf,EACE,gCACE,8BACE,cAAC,GAAD,CAAMzG,UAAQ,EAAd,SAAgBsH,MAElB,cAAC,KAAD,CACE7M,MAAO6M,EACPtI,KAAK,MACLmJ,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,QAIjCnB,EACE,eAAC,IAAD,CAEEnG,QAAS,WACPwG,EAAM,KAHV,UAME,cAAC5B,GAAA,EAAD,IANF,UACM,QAQRwB,EACE,eAAC,IAAD,CAEEpG,QAAS,WACP8G,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACe,GAAA,EAAD,IAPF,iBACM,aASH,GAAIV,EAAI,CACb,IAAMA,EAAKnM,aAAaC,QAAQ,kBAC1B6M,EAAS,IAAIlR,UAAOyF,OAAO8K,GAEjC,GAAIW,EAAO5T,UAAYyS,EACrBb,EACE,8BACE,8EAGC,CACL,IAAMiC,EAAsB,GACtBC,EAAiB,GASvB,IAAK,IAAMjM,KARXgM,EAAoBD,EAAO5T,UAAW,EACtC8T,EAAeC,KACb,qBAAKtJ,MAAO,CAAEW,SAAU,GAAIc,QAAS,EAAG8H,gBAAiB,WAAzD,SACE,oBAAGnJ,KAAM,OAASoI,EAAlB,UACE,cAACzJ,EAAD,CAASgB,WAAS,EAACxK,QAAS4T,EAAO5T,QAAS2J,YAAaF,EAAME,cADjE,IACkFiK,EAAO5T,QAAQkK,OAAO,EAAG,SAI7FpD,aAChB,GAAIe,EAAIiB,QAAQ,0BAA4B,EAAG,CAC7CtF,QAAQC,IAAIoE,GACZ,IAAMoM,EAASnN,aAAaC,QAAQc,GAC9BqM,EAAa,IAAIxR,UAAOyF,OAAO8L,GAChCJ,EAAoBK,EAAWlU,WAClC6T,EAAoBK,EAAWlU,UAAW,EAC1C8T,EAAeC,KACb,qBAAKtJ,MAAO,CAAEW,SAAU,IAAxB,SACE,oBAAGP,KAAM,OAASoJ,EAAlB,UACE,cAACzK,EAAD,CAASgB,WAAS,EAACxK,QAASkU,EAAWlU,QAAS2J,YAAaF,EAAME,cAAgB,IAClFuK,EAAWlU,QAAQkK,OAAO,EAAG,UAQ1C0H,EACE,gCACE,6CAEA,8BACE,cAAC,GAAD,CAAMzG,UAAQ,EAAd,SAAgB8H,MAGlB,uBAEA,8EAEE,mBAAGrI,OAAO,SAASC,KAAM,mBAAqBoI,EAAInI,IAAI,sBAAtD,2BAFF,OAOA,cAAC,KAAD,CACElF,MAAO,mBAAqBqN,EAC5B9I,KAAK,MACLmJ,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,KAG7B,cAACvB,GAAD,CAAW1H,MAAO,CAAEW,SAAU,MAAQD,UAAQ,EAA9C,SACG,mBAAqB8H,IAGvBa,EACC,gCACE,qDACCA,EACD,cAAC,IAAD,CACE1H,QAAS,WACP,IAAM/C,EAAoBxC,OAAOC,aAAaC,QAAQ,kBAClDsC,GACFxC,OAAOC,aAAaQ,QAAQ,wBAA0BH,KAAKC,MAAOiC,GAEpE,IACMhB,EADe3F,UAAOyF,OAAOC,eACH+L,cAAc9L,WAC9CxB,OAAOC,aAAaQ,QAAQ,iBAAkBe,GAC9CxB,OAAO+B,SAASwL,UATpB,yBAgBF,MAMR7B,EACE,eAAC,IAAD,CAEEnG,QAAS,WACPwG,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAClC,GAAA,EAAD,IAPF,aACM,WASRwB,EACE,eAAC,IAAD,CAEEpG,QAAS,WACP8G,EAAM,IACNN,EAAM,KAJV,UAOE,cAACe,GAAA,EAAD,IAPF,UACM,YASH,CACL,IAAMU,EAAa,CACjBnI,QAAS,IAGX0F,EACE,gCACE,qBAAKnH,MAAO4J,EAAZ,SACE,cAAC1D,GAAD,CACES,WAAS,EACTzH,YAAaF,EAAME,YACnB0H,YAAY,aACZrR,QAAS+S,EACTrN,SAAUsN,MAGd,qBAAKvI,MAAO4J,EAAZ,SACE,cAAC7C,GAAD,CACExF,MAAOvC,EAAMuC,MACbpG,MAAOiN,EACPnN,SAAU,SAAAE,GACRkN,EAAUlN,WAMpB2M,EACE,eAAC,IAAD,CAEEnG,QAAS,WACPwG,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAClC,GAAA,EAAD,IAPF,aACM,WASRwB,EACE,eAAC,IAAD,CAEEpG,QAAS,WACP8G,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACe,GAAA,EAAD,IAPF,iBACM,QAWV,OACE,iCACGR,EACD,cAAC,KAAD,CACEmB,QAAS5E,EACTqC,MACE,gCACGU,EAAkB,cAACjJ,EAAD,CAASxJ,QAASyS,EAAiB9I,YAAaF,EAAME,cAAkB,cAAC,KAAD,IAC3F,qBAAKc,MAAO,CAAE8J,MAAO,QAASC,aAAc,IAA5C,SACE,cAAClJ,EAAD,CAAStL,QAASyS,EAAiBpS,SAAUoJ,EAAMpJ,SAAU4L,iBAAkBxC,EAAMuC,aAI3FyI,KAAM,WACJ7B,IACAM,IACAR,GAAShD,IAEXgF,SAAU,WACR9B,IACAM,IACAR,GAAShD,IAEXiF,OAAQ,CACNnC,EACAD,EACA,eAAC,IAAD,CAEElT,KAAK,UACLuV,UAAW/B,IAAWE,GAAaJ,EACnCkC,SAAS,EACTzI,QAAS,WACP,IAEIxG,EAFEqI,EAAKF,GAAWtE,EAAM3F,QAAU2F,EAAMpJ,UAG5C,IACEuF,EAAQlD,UAAOJ,MAAMwS,WAAW,GAAKjC,GACrC,MAAOtO,GAEPqB,EAAQlD,UAAOJ,MAAMwS,WAAW,GAAKpJ,WAAWmH,GAAQ/G,QAAQ,IAGlEmC,EAAG,CACD8G,GAAIhC,EACJnN,UAEF8M,GAAShD,GACTkD,KArBJ,UAwBE,cAACoC,GAAA,EAAD,IAxBF,UACM,WAxBV,SAmDGpD,OC/SM,SAASqD,GAAT,GAWX,IAVFjV,EAUC,EAVDA,QACAkV,EASC,EATDA,WACAxN,EAQC,EARDA,cACAyN,EAOC,EAPDA,gBACAnJ,EAMC,EANDA,MACAxB,EAKC,EALDA,UACA4K,EAIC,EAJDA,UACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,kBACAhL,EACC,EADDA,cAEMiL,EAAe,GACjBH,IACEA,EAAUI,eACZD,EAAaxB,KACX,cAAC,IAAD,CAEEtJ,MAAO,CAAEC,cAAe,MAAO+K,WAAY,EAAGC,UAAW,GACzDC,MAAM,QACNxL,KAAK,QACLiC,QAASkJ,EALX,mBACM,iBAURC,EAAaxB,KACX,cAAC,IAAD,CAEEtJ,MAAO,CAAEC,cAAe,MAAO+K,WAAY,EAAGC,UAAW,GACzDC,MAAM,QACNxL,KAAK,QAELiC,QAASiJ,EANX,oBACM,iBAaZ,IAAQzL,EAAiBC,cAAjBD,aAEFgI,EAAUpH,EACd,GAEA,iCACGxK,EACC,cAACwJ,EAAD,CAASxJ,QAASA,EAAS2J,YAAawL,EAAiB7K,cAAeA,IAExE,gBAEF,cAACgB,EAAD,CAAStL,QAASA,EAASK,SAAUqH,EAAesE,MAAOA,IAC3D,cAAC7D,GAAD,CACEnI,QAASA,EACTK,SAAUqH,EACV5D,OAAQoR,EACRvL,YAAawL,EACbnJ,MAAOA,EACPrB,MAAwB,UAAjBf,EAA2B,UAAY,eAKpD,OACE,gCACGgI,EACA2D,KC1GP,OAA6B5S,EAAQ,IAArC,GAAQL,MAAR,GAAesT,U,0BCDPtT,GAAUK,EAAQ,IAAlBL,MAgBOuT,GAdM,SAAAC,GACnB,GAAIA,GAASA,EAAMC,SACjB,IACE,OAAOD,EAAMC,WACb,MAAOxR,GACP,MAAO,SAAMjC,GAAM0T,YAAYF,EAAO,SAG1C,OAAIA,GAASA,EAAMhN,SAAmC,IAAxBgN,EAAMhN,QAAQ,OAAgC,KAAjBgN,EAAMhV,OACxD,cAAC0I,EAAD,CAASxJ,QAAS8V,EAAO1K,SAAU,KAErCpE,KAAKO,UAAUuO,ICoCTG,GA/CS,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,iBAAkBC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eAC1E,EAAgC5U,mBAAS,IAAzC,mBAAO6U,EAAP,KAAiBC,EAAjB,KAEMC,EAAU3U,sBAAW,sBAAC,4BAAAC,EAAA,+EAEGoU,IAFH,OAElBO,EAFkB,OAGxBF,EAAYE,GACZJ,GAAe,GAJS,gDAMxB7S,QAAQC,IAAR,MANwB,yDAQzB,CAAC8S,EAAaL,EAAkBG,IAMnC,OAJA3V,qBAAU,WACR8V,MACC,CAACA,EAASJ,EAAiBF,IAG5B,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEQ,KAAM,EACNjM,MAAO,CACLkM,UAAW,QACXC,QAAS,KACTpC,aAAc,EACdpJ,SAAU,IANd,SASG+K,EAAahX,OAEhB,cAAC,IAAD,CAAKuX,KAAM,GAAX,SACE,6BAAKb,GAAaS,OAEpB,cAAC,IAAD,CAAKI,KAAM,EAAX,SACE,6BACE,mBAAG7L,KAAK,IAAIuB,QAASoK,EAArB,iCAMN,cAAC,KAAD,QCxCN,GAA6B7T,EAAQ,IAA7BL,GAAR,GAAQA,MAAOuU,GAAf,GAAeA,UAEA,SAASC,GAAT,GAA+F,IAAvEZ,EAAsE,EAAtEA,iBAAkBC,EAAoD,EAApDA,aAAc9V,EAAsC,EAAtCA,SAAU4M,EAA4B,EAA5BA,SAAUoJ,EAAkB,EAAlBA,eACzF,EAAwB5U,mBAAS,IAAjC,mBAAOsV,EAAP,KAAaC,EAAb,KACA,EAA8BvV,qBAA9B,mBAAOwV,EAAP,KAAgBC,EAAhB,KACA,EAAsCzV,qBAAtC,mBAAO0V,EAAP,KAAoBC,EAApB,KAEMnJ,EAAKF,GAAW1N,EAAU4M,GAE5BoK,EAAa,EACXnY,EAASiX,EAAajX,OAAOoY,KAAI,SAAAC,GACrC,IAAM1P,EAAMsO,EAAahX,KAAO,IAAMoY,EAAMpY,KAAO,IAAMoY,EAAMlY,KAAO,IAAMgY,IAExEG,EAAU,GACd,GAAmB,YAAfD,EAAMlY,KACRmY,EACE,cAAC,KAAD,CAASzH,UAAU,QAAQgC,MAAM,aAAjC,SACE,qBACE1S,KAAK,SACLoL,MAAO,CAAE0B,OAAQ,WACjBC,QAAO,sBAAE,8BAAAtK,EAAA,sDACHQ,GAAMmV,YAAYV,EAAKlP,MACnB6P,EAD0B,eACRX,IACblP,GAAOvF,GAAMqV,mBAAmBZ,EAAKlP,IAChDmP,EAAQU,MAEFA,EADD,eACmBX,IACblP,GAAOvF,GAAMsV,oBAAoBb,EAAKlP,IACjDmP,EAAQU,IARH,2CAHX,kCAmBC,GAAmB,UAAfH,EAAMlY,KACfmY,EACE,cAAC,KAAD,CAASzH,UAAU,QAAQgC,MAAM,SAAjC,SACE,qBACE1S,KAAK,SACLoL,MAAO,CAAE0B,OAAQ,WACjBC,QAAO,sBAAE,8BAAAtK,EAAA,sDACHQ,GAAMmV,YAAYV,EAAKlP,MACnB6P,EAD0B,eACRX,IACblP,GAAOvF,GAAMuV,aAAad,EAAKlP,IAC1CmP,EAAQU,MAEFA,EADD,eACmBX,IACblP,GAAOvF,GAAMgN,QAAQhN,GAAMwV,YAAYf,EAAKlP,KACvDmP,EAAQU,IARH,2CAHX,kCAmBC,GAAmB,YAAfH,EAAMlY,KACfmY,EACE,cAAC,KAAD,CAASzH,UAAU,QAAQgC,MAAM,aAAjC,SACE,qBACE1S,KAAK,SACLoL,MAAO,CAAE0B,OAAQ,WACjBC,QAAO,sBAAE,4BAAAtK,EAAA,uDACD4V,EADC,eACiBX,IACblP,GAAOvF,GAAMwS,WAAWiC,EAAKlP,IACxCmP,EAAQU,GAHD,2CAHX,iCAaC,GAAmB,YAAfH,EAAMlY,KAAoB,CACnC,IAAM6R,EAAkB6F,EAAKlP,IAAQkP,EAAKlP,GAAKmD,aAAe+L,EAAKlP,GAAKmD,cAAc+M,OAClF7G,GAA8C,KAA3BA,EAAgBpQ,SACrC0W,EACE,cAAC,KAAD,CAASzH,UAAU,QAAQgC,MAAM,UAAjC,SACE,cAAC,IAAD,CAAUhH,KAAMmG,EAAiBjG,MAAO,OAMhD,OACE,qBAAKR,MAAO,CAAEuN,OAAQ,GAAtB,SACE,cAAC,KAAD,CACE7N,KAAK,QACLkH,YAAakG,EAAMpY,KAAOoY,EAAMlY,KAAO,IAAMkY,EAAMpY,KAAOoY,EAAMlY,KAChE8R,aAAa,MACbvL,MAAOmR,EAAKlP,GACZ1I,KAAM0I,EACNnC,SAAU,SAAAuS,GACR,IAAMP,EAAU,eAAQX,GACxBW,EAAWO,EAAMrN,OAAOzL,MAAQ8Y,EAAMrN,OAAOhF,MAC7CoR,EAAQU,IAEVQ,OAAQV,KAZoB3P,MAkB9BsQ,EACJ,qBAAK1N,MAAO,CAAEuN,OAAQ,GAAtB,SACE,cAAC,KAAD,CACE3G,YAAY,oBACZ3L,SAAU,SAAAnB,GAAC,OAAI2S,EAAW3S,EAAEqG,OAAOhF,QACnCA,MAAOqR,EACPxF,WACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKiF,KAAM,GAAX,SACE,cAAC,KAAD,CAAS3G,UAAU,QAAQgC,MAAM,YAAjC,SACE,qBACE1S,KAAK,SACLoL,MAAO,CAAE0B,OAAQ,WACjBC,QAAO,sBAAE,4BAAAtK,EAAA,uDACDsW,EAAa1M,WAAWuL,KACdC,EAAW,GAAKkB,EAAU,SAAG,GAAM,KAF5C,2CAHX,8BAYJ,cAAC,IAAD,CAAK1B,KAAM,GAAX,SACE,cAAC,KAAD,CAAS3G,UAAU,QAAQgC,MAAM,gBAAjC,SACE,qBACE1S,KAAK,SACLoL,MAAO,CAAE0B,OAAQ,WACjBC,QAAO,sBAAE,sBAAAtK,EAAA,sDACPoV,EAAWL,GAAUwB,KAAKpB,GAASqB,eAD5B,2CAHX,uCAxBiB,gBA0C7BnC,EAAa7W,SACfJ,EAAO6U,KAAKoE,GAGd,IAAMI,EACkB,SAAtBpC,EAAa9W,KACX,cAAC,IAAD,CAAQoL,MAAO,CAAEgL,YAAa,IAA9B,8BAEA,cAAC,IAAD,CAAQhL,MAAO,CAAEgL,YAAa,IAA9B,8BA+DJ,OA7DAvW,EAAO6U,KACL,qBAAKtJ,MAAO,CAAE0B,OAAQ,UAAW6L,OAAQ,GAAzC,SACE,cAAC,KAAD,CACEtS,SAAU,SAAAnB,GAAC,OAAI6S,EAAe7S,EAAEqG,OAAOhF,QACvC4S,aAAa,GACbC,UAAU,EACV7D,UAAQ,EACRhP,MAAOuR,EACPe,OACE,qBACEzN,MAAO,CAAE8G,MAAO,GAAImH,OAAQ,GAAIV,OAAQ,GACxC3Y,KAAK,UACL+M,QAAO,sBAAE,sCAAAtK,EAAA,yDACH6W,EAAa,EACXpY,EAAO4V,EAAajX,OAAOoY,KAAI,SAAAC,GACnC,IAAM1P,EAAMsO,EAAahX,KAAO,IAAMoY,EAAMpY,KAAO,IAAMoY,EAAMlY,KAAO,IAAMsZ,IACxE/S,EAAQmR,EAAKlP,GAUjB,MATuB,UAAnB0P,EAAMqB,SACRhT,EAAQoB,KAAKC,MAAMrB,GACK,SAAf2R,EAAMlY,OAEbuG,EADY,SAAVA,GAA8B,MAAVA,GAA2B,QAAVA,GAA6B,SAAVA,GAA8B,WAAVA,EACtE,EAEA,GAGLA,KAI4B,SAAjCuQ,EAAa5W,iBAA+D,SAAjC4W,EAAa5W,gBAlBrD,gCAmBkB2W,EAAgB,WAAhB,cAAoB3V,IAnBtC,OAmBCsY,EAnBD,OAoBL1J,EAAS0G,GAAagD,GApBjB,8BAsBCC,EAAY,GACd7B,IACF6B,EAAUlT,MAAQqR,GAEhBhK,IACF6L,EAAU7L,SAAWA,GA3BlB,UAiCkBgB,EAAGiI,EAAgB,WAAhB,cAAoB3V,GAApB,QAA0BuY,MAjC/C,QAiCCD,EAjCD,OAkCL1J,EAAS0G,GAAagD,GAlCjB,QAqCPrV,QAAQC,IAAI,kBAAmB0L,GAC/BiI,EAAejI,GACfkH,GAAe,GAvCR,4CAHX,SA6CGkC,OArDyC,aA6DlD,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACE7B,KAAM,EACNjM,MAAO,CACLkM,UAAW,QACXC,QAAS,KACTpC,aAAc,EACdpJ,SAAU,IANd,SASG+K,EAAahX,OAEhB,cAAC,IAAD,CAAKuX,KAAM,GAAX,SAAgBxX,OAElB,cAAC,KAAD,OCzON,IAAM6Z,GACJ,6CACa,IACX,sBAAKtO,MAAO,CAAEyB,QAAS,IAAvB,4BACkB,IAChB,sBACE8M,UAAU,YACVvO,MAAO,CAAEgL,WAAY,EAAqCvJ,QAAS,EAAG+M,aAAc,EAAGC,WAAY,UAFrG,4BAKQ,IAPV,MAQM,IACJ,sBACEF,UAAU,YACVvO,MAAO,CAAEgL,WAAY,EAAqCvJ,QAAS,EAAG+M,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IAdV,gCAiBA,sBAAKzO,MAAO,CAAEyB,QAAS,IAAvB,UACE,sBAAMzB,MAAO,CAAE0O,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BADF,iCAKE,sBACEJ,UAAU,YACVvO,MAAO,CAAEgL,WAAY,EAAqCvJ,QAAS,EAAG+M,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IACR,sCAXF,sCAkBW,SAAS7T,GAAT,GAWX,IAEEgU,EAZJC,EAUC,EAVDA,eACAC,EASC,EATDA,QACAtM,EAQC,EARDA,SACAnJ,EAOC,EAPDA,OACAzD,EAMC,EANDA,SACAlB,EAKC,EALDA,KACAqa,EAIC,EAJDA,KACAxN,EAGC,EAHDA,MACA1B,EAEC,EAFDA,cACAnG,EACC,EADDA,QAEMrE,EAAY8C,EAAkBvC,EAAU,CAAE8D,YAQ1CnE,GAHJqZ,EAHGC,IACQxZ,EAAYA,EAAUX,GAAQ,KAKhBka,EAASrZ,QAAU,GACxCmC,EAAqBF,EAA2B5B,EAAUL,GAE1DyZ,EAA6BhR,mBACjC,kBACE4Q,EACInW,OAAOI,OAAO+V,EAASK,UAAUC,WAAWC,QAC1C,SAAAtZ,GAAE,MAAgB,aAAZA,EAAGjB,QAAyBma,GAAQA,EAAK1Q,QAAQxI,EAAGnB,MAAQ,MAEpE,KACN,CAACka,EAAUG,IAGb,EAA0C/X,oBAAS,GAAnD,mBAAO2U,EAAP,KAAwBC,EAAxB,KACMwD,EAAkBJ,EAA2BnC,KAAI,SAAAhX,GACrD,OArCgB,SAAAA,GAAE,OAA4B,SAAvBA,EAAGf,iBAAqD,SAAvBe,EAAGf,kBAAoD,IAArBe,EAAGpB,OAAO4B,OAqChGgZ,CAAYxZ,GAGZ,cAAC,GAAD,CAEE4V,iBAAkBmD,EAAS/Y,EAAGnB,MAC9BgX,aAAc7V,EACd8V,gBAAiBA,EACjBC,eAAgBA,GAJX/V,EAAGnB,MAUZ,cAAC2X,GAAD,CAEEZ,iBACyB,SAAvB5V,EAAGf,iBAAqD,SAAvBe,EAAGf,gBAChC8Z,EAAS/Y,EAAGnB,MACZka,EAAS9Q,QAAQzE,GAAQxD,EAAGnB,MAElCgX,aAAc7V,EACdD,SAAUA,EACV4M,SAAUA,EACVoJ,eAAgBA,GATX,KAAO/V,EAAGnB,SAcrB,OACE,qBAAKsL,MAAO,CAAEuN,OAAQ,OAAQzG,MAAO,QAArC,SACE,cAAC,KAAD,CACEQ,MACE,gCACG5S,EACD,sBAAKsL,MAAO,CAAE8J,MAAO,SAArB,UACE,cAACU,GAAD,CACEjV,QAASA,EACT0H,cAAerH,EACfoH,iBAAkBpH,EAClB8U,gBAAiB9U,EACjB2L,MAAOA,EACP1B,cAAeA,IAEhBiP,QAIPpP,KAAK,QACLM,MAAO,CAAEiL,UAAW,GAAInE,MAAO,QAC/BsD,QAASgF,GAAmBA,EAAgB/Y,QAAU,EAnBxD,SAqBGqB,EAAqB0X,EAAkBd,OC5HhD,IAAQzW,GAAUK,EAAQ,IAAlBL,MA8BO,SAASyX,GAAOtQ,GAC7B,IAcIuQ,EAdJ,EAA8BvY,qBAA9B,mBAAOzB,EAAP,KAAgBia,EAAhB,KACA,EAA0CxY,qBAA1C,mBAAOyY,EAAP,KAAsBC,EAAtB,KAEAzZ,qBAAU,YACc,uCAAG,4BAAAoB,EAAA,0DACnB2H,EAAM/B,cADa,gCAEQ+B,EAAM/B,cAAchE,eAF5B,OAEf0W,EAFe,OAGrBD,EAAiBC,EAAe,IAChC5W,QAAQC,IAAI2W,GAJS,2CAAH,qDAOtBC,KACC,CAAC5Q,EAAM/B,gBAIRsS,EADEha,GAA0C,oBAAxBA,EAAQgL,YAClB,cAAC,IAAD,CAAUD,KAAM/K,EAAQgL,cAAeb,KAAM,EAAGc,MAAO,IAEvD,wBAGZ,IAAMvB,EAAMjD,YAAiBgD,EAAME,YAAa3J,GAE1CiR,EAAgBpP,sBAAW,uCAC/B,WAAMsE,GAAN,iBAAArE,EAAA,yDAC0B,qBAAbqE,EADb,uBAEQnG,EAAUmG,GACF2C,QAAQ,QAAU,GAAK9I,EAAQ8I,QAAQ,QAAU,GAHjE,0CAKsCW,EAAME,YAAYrD,YAAYtG,GALpE,QAKckR,EALd,UAOUlR,EAAUkR,GAPpB,0DAYI+I,EAAWja,GAZf,0DAD+B,sDAgB/B,CAACyJ,EAAME,YAAaF,EAAM/D,WAGtBuI,EAAKF,GAAWtE,EAAM/B,eAE5B,OACE,+BACE,cAAC,KAAD,CACEyC,KAAK,QACLkH,YAAa5H,EAAM4H,YAAc5H,EAAM4H,YAAc,eACrDC,OAAQ0I,EAERpU,MAAO8D,GAAO1J,EACd0F,SAAU,SAAAnB,GAER0M,EAAc1M,EAAEqG,OAAOhF,QAEzBsS,OACE,eAAC,KAAD,CAASnG,MAAM,0CAAf,UACE,cAAC,IAAD,CACE3F,QAAS,WACP6B,EAAG,CACD8G,GAAI/U,EACJ4F,MAAOtD,GAAMwS,WAAW,UAE1BmF,EAAW,KAEbtE,MAAM,SACN2E,KAAM,cAACtF,GAAA,EAAD,MAER,cAAC7M,GAAD,CACEwC,MAAM,UACNtK,SAAUoJ,EAAM/B,cAChBiC,YAAaF,EAAME,YACnBqC,MAAOvC,EAAMuC,MACbhM,QAASka,WC5FR,SAASK,GAAS9Q,GAC/B,OACE,eAAC,IAAD,CACE2C,QAAS,WACPvF,OAAO6I,KAAK,gCAEdvF,KAAK,QACLwL,MAAM,QALR,UAOE,sBAAMlL,MAAO,CAAE0O,YAAa,GAA5B,SACE,sBAAMC,KAAK,MAAM,aAAW,WAA5B,4BAIyB,qBAAnB3P,EAAMwD,SAA2B,EAAIuN,SAAS/Q,EAAMwD,SAAU,IAAzB,SAA+B,GAAM,GAZpF,O,eClBW,SAASwN,KACtB,OACE,mBAAG5P,KAAK,kDAAkDD,OAAO,SAASE,IAAI,sBAA9E,SACE,cAAC,KAAD,CACEiH,MAAM,mCACN2I,SAAS,yDACTjQ,MAAO,CAAE0B,OAAQ,e,yBCgBV,SAASwO,GAAKlR,GAC3B,MAA8BhI,mBAAS,QAAvC,mBAAOmZ,EAAP,KAAgBC,EAAhB,KAEMxb,EAAO,UAEPyb,EAAa,GALe,WAMvBjN,GACyB,QAA9BpE,EAAMsR,SAASlN,GAAG1J,SAAmD,IAA9BsF,EAAMsR,SAASlN,GAAG1J,SAC3D2W,EAAW/G,KACT,4BACE,cAAC,IAAD,CACEtJ,MAAO,CAAEE,MAAOlB,EAAMsR,SAASlN,GAAGlD,OAClCtL,KAAMA,EACN8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPvF,OAAO6I,KAAKjG,EAAMsR,SAASlN,GAAGjB,SANlC,SASGnD,EAAMsR,SAASlN,GAAG1O,QAVfsK,EAAMsR,SAASlN,GAAG1J,WAHhC,IAAK,IAAM0J,KAAKpE,EAAMsR,SAAW,EAAtBlN,GAoBX,OACE,gCACE,eAAC,IAAD,CACE1D,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPyO,EAAW,OAJf,UAOE,cAACG,GAAA,EAAD,CAAsBvQ,MAAO,CAAEE,MAAO,aAAgB,IAC9B,qBAAhBlB,EAAMuC,MAAwB,EAAIvC,EAAMuC,MAAMF,QAAQ,MAEhE,eAAC,KAAD,CACEiG,MAAM,UACNuC,QAAqB,OAAZsG,EACTlG,SAAU,WACRmG,EAAW,SAEblG,OAAQ,CACN,cAAC,IAAD,CAEEvI,QAAS,WACPyO,EAAW,SAHf,mBACM,SARV,UAiBE,4BACE,eAAC,IAAD,CACExb,KAAMA,EACN8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPvF,OAAO6I,KAAK,2EAA6EjG,EAAMzJ,UALnG,UAQE,sBAAMyK,MAAO,CAAE+J,aAAc,IAAM4E,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCATJ,YAgBF,8BACG,IACD,eAAC,IAAD,CACE/Z,KAAMA,EACN8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACP,IAAI6O,KAAe,CACjBC,YAAa,eACbC,YAAa,0CACbC,WAAY,qBACZC,UAAW,MACXC,YAAa7R,EAAMzJ,UAElBe,GAAG,KAAK,SAAAkX,GAAK,OAAIzU,QAAQC,IAAIwU,MAC7BuB,QAbP,UAgBE,sBAAM/O,MAAO,CAAE+J,aAAc,IAAM4E,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCAjBJ,aAyBF,4BACE,eAAC,IAAD,CACE/Z,KAAMA,EACN8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPvF,OAAO6I,KAAK,0CALhB,UAQE,sBAAMjF,MAAO,CAAE+J,aAAc,IAAM4E,KAAK,MAAM,aAAW,OAAzD,0BARF,gBAeF,cAAC,KAAD,IAEA,6CAEC0B,Q,gFC3HUS,KAAXC,OACSjS,IAATD,KA2pBOmS,I,WC/qBA,SAASC,KACtB,IAAMC,EAAQ9U,OAAOC,aAAaC,QAAQ,SAC1C,EAAoCtF,sBAAYka,GAAmB,UAAVA,IAAzD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmDhS,cAA3CiS,EAAR,EAAQA,SAAUlS,EAAlB,EAAkBA,aAAsBmS,GAAxC,EAAgCC,OAAhC,EAAwCD,QAExCrb,qBAAU,WACRmG,OAAOC,aAAaQ,QAAQ,QAASsC,KACpC,CAACA,IAYJ,OACE,sBAAKoP,UAAU,eAAevO,MAAO,CAAEwR,SAAU,QAASC,MAAO,EAAGC,OAAQ,GAA5E,UACE,sBAAM1R,MAAO,CAAEyB,QAAS,GAAxB,SAA+C,UAAjBtC,EAA2B,eAAO,iBAChE,cAAC,KAAD,CAAQwS,QAASR,EAAYlW,SAbb,SAAA2W,GAClBR,EAAcQ,GACdP,EAAS,CAAEH,MAAOU,EAAYN,EAAOO,KAAOP,EAAOQ,c,uBCVtChT,IAATD,K,mCCiOR,I,0CCvNQkS,I,OAAWD,KAAXC,QAEO,SAASgB,GAAT,GAWX,IAVFxc,EAUC,EAVDA,QACAmV,EASC,EATDA,gBACAzN,EAQC,EARDA,cAKAuG,GAGC,EAPDwO,iBAOC,EANDvH,WAMC,EALDwH,iBAKC,EAJD1Q,MAIC,EAHDiC,IACA0O,EAEC,EAFDA,cACAC,EACC,EADDA,eAEA,EAAwCnb,mBAAS,GAAjD,mBAAOob,EAAP,KAAqBC,EAArB,KACA,EAAwCrb,mBAAS,IAAjD,mBAAOsb,EAAP,KAAqBC,EAArB,KACA,EAAsCvb,mBAAS,IAA/C,mBAAOwb,EAAP,KAAoBC,EAApB,KACA,EAA0Dzb,mBAAS,MAAnE,mBAAO0b,EAAP,KAA8BC,EAA9B,KACA,EAA0D3b,mBAAS,MAAnE,mBAAO4b,EAAP,KAA8BC,EAA9B,KAEA,EAA4C7b,oBAAS,GAArD,mBAAO8b,EAAP,KAAuBC,EAAvB,KACA,EAAoC/b,oBAAS,GAA7C,mBAAOgc,EAAP,KAAmBC,EAAnB,KAEA,EAAeC,KAAKC,UAAb7G,EAAP,oBAEM8G,EAAgBC,cAsBtB,IAAMC,EAAU,CACd,CACEhM,MAAO,UACPiM,UAAW,eACXnW,IAAK,eACL0J,MAAO,IACP0M,MAAO,UAET,CACElM,MAAO,OACPiM,UAAW,OACXnW,IAAK,OACL0J,MAAO,IACP0M,MAAO,UAET,CACElM,MAAO,QACPiM,UAAW,QACXnW,IAAK,QACL0J,MAAO,IACP0M,MAAO,SACPC,OAAQ,SAAAC,GAAK,OACX,cAAC3U,EAAD,CAASxJ,QAASme,EAAO/S,SAAS,OAAOzB,YAAawL,EAAiB7K,cAAeA,OAG1F,CACEyH,MAAO,OACPiM,UAAW,QACXnW,IAAK,QACLoW,MAAO,SACPC,OAAQ,SAAAE,GAAK,OACXA,EAAM9G,KAAI,SAAA+G,GAKR,IAAI1T,EAAQ,WAIZ,MAHS,aAAL0T,IACF1T,EAAQ,SAGR,cAAC,KAAD,CAAKA,MAAOA,EAAZ,SACG0T,EAAErT,eADmBqT,QAMhC,CACEtM,MAAO,aACPiM,UAAW,YACXnW,IAAK,YACLoW,MAAO,UAET,CACElM,MAAO,QACPiM,UAAW,UACXnW,IAAK,UACLoW,MAAO,UAET,CACElM,MAAO,SACPiM,UAAW,SACXnW,IAAK,SACLoW,MAAO,UAET,CACElM,MAAO,SACPlK,IAAK,SACLoW,MAAO,SACPC,OAAQ,SAAC9T,EAAMkU,EAAQC,GAAf,OACN,mCACE,cAAC,KAAD,CAAOpU,KAAK,SAAZ,SACE,cAAC,IAAD,CAAQ9K,KAAK,UAAU8K,KAAK,QAAQwL,MAAM,QAAQvJ,QAAS,kBA5ErE,SAAsBkS,GACpBT,EAAc9J,KAAK,WAAauK,EAAOzW,KA2EkC2W,CAAaF,IAA9E,yBAQV5d,qBAAU,WACJic,GACEA,EAAc8B,YAChBjb,QAAQC,IAAI,iBACZib,OAGH,CAAC/B,IAEJ,IAAM+B,EAAI,uCAAG,4BAAA5c,EAAA,sDACX0B,QAAQC,IAAI,mBAAoBzD,GAGhC2e,EADIzZ,EAAe,YACY,kBAAmB0Z,GAClDD,EAAiBzZ,EAAc,aAAc2Z,GAC7CC,IANW,2CAAH,qDASJH,EAAgB,uCAAG,WAAOzZ,EAAc6Z,EAAW7Q,GAAhC,SAAApM,EAAA,sEACjB6a,EAAczX,GAAc8Z,eAAeD,GAD1B,OAEvBpC,EAAczX,GAAcnE,GAAGge,GAAW,WAAc,IAAD,uBAATxe,EAAS,yBAATA,EAAS,gBACrD,IAAI0e,EAAgB1e,EAAKA,EAAKO,OAAS,GAAGD,YACtCoe,GAAiBvX,EAAcwX,kBACjChR,OALmB,2CAAH,0DAUtB,SAAS0Q,IACPpb,QAAQC,IAAI,qBACZia,GAAc,GACd3G,EAAKoI,cACDC,IAAUA,GAAOze,SACnBye,GAAOze,QAAQ0e,KAAK,GAEtBP,IAGF,SAASD,IACPrb,QAAQC,IAAI,gBACZqb,IAGF,IAAMA,EAAU,uCAAG,gDAAAhd,EAAA,6DACjB0B,QAAQC,IAAI,eACZ6b,IAAoB,GAFH,SAGW3C,EAAc8B,UAAU5B,eAHnC,OAGXA,EAHW,OAGmD9G,WAEpE+G,EAAgBD,GACZvM,EAAO,GACK,GACPiP,EAAI,EARI,YAQDA,EAAI1C,GARH,kCASQF,EAAc8B,UAAUe,gBAAgBD,GAThD,eASTE,EATS,OAWTtgB,EAAOsgB,EAAStgB,KAChBugB,EAASD,EAASC,OAAO3J,WAZhB,UAaQ4G,EAAc8B,UAAUkB,iBAAiBJ,GAbjD,eAaTK,EAbS,OAaqD7J,WAEhEiG,EAAS,SACRyD,EAASI,WACZ7D,EAAS,YAGX8D,GADIA,EAAe,IAAI3Y,KAAqC,IAAhCsY,EAASM,UAAUhK,aACnBiK,cAAcC,UAAU,EAAG,IACnD9B,EAAQsB,EAAStB,MACjBC,EAAQ,GACIqB,EAAStB,OAASne,GAEhCoe,EAAMrK,KAAK,SAzBE,UA2BW4I,EAAc8B,UAAUyB,QAAQX,EAAGvf,GA3B9C,gBA6Bboe,EAAMrK,KAAK,aAEbzD,EAAKyD,KAAK,CACRlM,IAAK0X,EACLO,aAAcA,EACd3gB,KAAMA,EACNghB,UAAWT,EACXE,QAASA,EACTzB,MAAOA,EACPC,MAAOA,EACPpC,OAAQA,IAvCK,QAQiBuD,IARjB,uBA0CjBjP,EAAOA,EAAK8P,UACZpD,EAAgB1M,GAChBgP,IAAoB,GA5CH,4CAAH,qDAoDVe,GAAQ,uCAAG,sBAAAve,EAAA,sDACf4b,GAAc,GACdla,QAAQC,IAAI,CAAE4Z,0BACd7Z,QAAQC,IAAI,CAAE0Z,0BACd3Z,QAAQC,IAAI,CAAEwZ,gBACdzZ,QAAQC,IAAI,CAAE6c,eACCrS,EAEb2O,EAAe6B,UAAU8B,YAAYtD,EAAaI,EAAuBmD,GAAWrD,EAAuBmD,KAC3G,SAAAG,GACEjd,QAAQC,IAAI,mCAA0Bgd,IAClCA,GAA6B,cAAlBA,EAAOzE,QAA4C,IAAlByE,EAAOzE,QAGrDxY,QAAQC,IAAI,gBAAiBgd,EAAOzE,QACpC0B,GAAc,IAHdla,QAAQC,IAAI,6BAAqBgd,EAAOxX,KAAO,iBAZtC,2CAAH,qDAsERmW,GAAS3e,iBAAO,MAEtB,GAAkCgB,mBAAS,IAA3C,qBAAO6e,GAAP,MAAkBI,GAAlB,MACA,GAAkCjf,mBAAS,IAA3C,qBAAOsR,GAAP,MAAkBC,GAAlB,MAEA,GAAsCvR,oBAAS,GAA/C,qBACA,IADA,YACgDA,oBAAS,IAAzD,qBAAOkf,GAAP,MAAyBrB,GAAzB,MACA,GAAkC7d,mBAAS,OAA3C,qBAAO+e,GAAP,MAAkBI,GAAlB,MAEIC,GAAc,CAChBpI,UAAU,EACV5D,QAAS8L,IAGLG,GACJ,eAAC,KAAD,CAAQtI,aAAa,MACnBQ,UAAU,oBACVtT,SAAW,SAAAE,GAAWgb,GAAahb,IAFrC,UAGE,cAAC,GAAD,CAAQA,MAAM,MAAd,iBACA,cAAC,GAAD,CAAQA,MAAM,MAAd,oBAIJ,OACE,qCACE,cAAC,KAAD,CAAO0O,QAASiJ,EAAgB5I,QAAQ,EAAOD,SAtR9B,WACnB8I,GAAkB,IAqRuDjM,MAAO,IAA9E,SACE,cAAC,KAAD,CACEwF,KAAMA,EACN5X,KAAK,QACL4hB,SAAU,CAAErK,KAAM,GAClBsK,WAAY,CAAEtK,KAAM,IACpBuK,cAAe,CAAEC,UAAU,GAC3Bb,SAAUA,GANZ,SAQE,eAAC,KAAD,CAAUc,IAAK/B,GAAQgC,YAAa,aAAUC,MAAM,MAAMC,MAAM,EAAhE,UACE,gCACE,cAAC,KAAD,CACEC,OAAO,EACPxP,MAAM,wBAENtH,MAAO,CACLmH,QAAS,OACT4P,eAAgB,SAChBC,WAAY,YAGhB,cAAC,KAAKC,KAAN,CACEviB,KAAK,YACLwiB,MAAM,OACNC,MAAO,CAAC,CAAEC,UAAU,EAAMhS,QAAS,gCAHrC,SAKE,cAAC,KAAD,CACE1F,KAAK,QACLkH,YAAY,gBACZF,aAAa,QACb2Q,YAAY,EACZpc,SAAU,SAAAnB,GACRA,EAAEqG,OAAOhF,OAAQsX,EAAe3Y,EAAEqG,OAAOhF,YAI/C,cAAC,KAAK8b,KAAN,CACEviB,KAAK,QACLwiB,MAAM,QAENC,MAAO,CAAC,CAAEC,UAAU,EAAME,QAAS,IAAIC,OAAO,YAAanS,QAAS,yBAJtE,SAqBA,cAAC,KAAD,CACEoS,YAAanB,GACbzP,YAAY,eACZlH,KAAK,QACL2X,YAAY,EACZlc,MAAOyX,EACP3X,SAAU,SAAAnB,GAEN,IAAI2d,EADDC,MAAMC,OAAO7d,EAAEqG,OAAOhF,WAEP,QAAd4a,IAEqB,QAAdA,MADT0B,EAAQG,iBAAMD,OAAO7d,EAAEqG,OAAOhF,OAAOkG,QAAQ,IAAIwW,aAInDhF,EAAyB4E,SAK/B,cAAC,KAAKR,KAAN,CACEviB,KAAK,QACLwiB,MAAM,kBACNC,MAAO,CACL,CAAEC,UAAU,EAAMhS,QAAS,iCAC3B,CAAEkS,QAAS,IAAIC,OAAO,YAAanS,QAAS,6BALhD,SAQE,cAAC,KAAD,CACE1F,KAAK,QACLkH,YAAY,IACZ3L,SAAU,SAAAE,GACRwX,EAAyBxX,QAK/B,qBACE6E,MAAO,CACLmH,QAAS,OACT4P,eAAgB,SAChBC,WAAY,UAJhB,SAOE,cAAC,KAAD,UACE,cAAC,IAAD,CACEpiB,KAAK,UACL8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPgT,GAAOze,QAAQ4hB,QALnB,6BAeN,gCACE,cAAC,KAAD,CACEhB,OAAO,EACPiB,OAAQ,WACNpD,GAAOze,QAAQ8hB,QAEjB1Q,MAAM,4BAGR,cAAC,KAAK2P,KAAN,CACEviB,KAAK,aACLsL,MAAO,CACLmH,QAAS,OACT4P,eAAgB,OAChBC,WAAY,UALhB,SAQE,eAAC,KAAD,WACE,cAAC9Q,GAAD,CACEhH,YAAawL,EACb9D,YAAY,gBACZzL,MAAOmN,GACPrN,SAAUsN,KAEZ,cAAC,IAAD,CACE3T,KAAK,UACL8K,KAAK,QACLiC,QAAS,WACPkU,GAAUvM,KAAKhB,IACfC,GAAa,KALjB,wBAYJ,cAAC,KAAD,CACEvI,MAAO,CAAEiY,SAAU,OAAQhK,OAAQ,SACnCiK,WAAW,aACXlK,UAAQ,EACRmK,WAAYtC,GACZuC,WAAY,SAACC,EAAMvE,GAAP,OACV,eAAC,KAAKmD,KAAN,WACE,cAAClY,EAAD,CAASxJ,QAAS8iB,EAAMnZ,YAAawL,EAAiB/J,SAAS,SAC/D,cAAC,IAAD,CACE/L,KAAK,OACL+M,QAAO,sBAAE,4BAAAtK,EAAA,uDACDihB,EADC,YACsBzC,KACZ0C,OAAOzE,EAAO,GAC/BmC,GAAaqC,GAHN,2CAKT5Y,KAAK,SACLM,MAAO,CAAEgL,WAAY,SARvB,0BAeN,qBACEhL,MAAO,CACLmH,QAAS,OACT4P,eAAgB,SAChBC,WAAY,UAJhB,SAOE,cAAC,KAAD,UACE,cAAC,IAAD,CACEpiB,KAAK,UACL8K,KAAK,QACLwL,MAAM,QACNvJ,QAAS,WACPgT,GAAOze,QAAQ4hB,QALnB,6BAcN,gCACE,cAAC,KAAD,CACEhB,OAAO,EACPiB,OAAQ,WACNpD,GAAOze,QAAQ8hB,QAEjB1Q,MAAM,6BAIR,eAAC,KAAD,CAAcA,MAAM,mBAAmBkR,OAAQ,EAAG9Y,KAAK,QAAQsO,UAAQ,EAAvE,UACE,cAAC,KAAaiJ,KAAd,CAAmBC,MAAM,OAAzB,SAAiC1E,IACjC,cAAC,KAAayE,KAAd,CAAmBC,MAAM,wBAAzB,SAAkDtE,IAClD,cAAC,KAAaqE,KAAd,CAAmBC,MAAM,kBAAzB,SAA4CxE,IAC5C,cAAC,KAAauE,KAAd,CAAmBC,MAAM,aAAzB,SACE,6BACGrB,GAAUhJ,KAAI,SAAA4L,GACb,OACE,+BACE,cAAC1Z,EAAD,CAASxJ,QAASkjB,EAAK9X,SAAS,SAAU,iBAOtD,qBACEX,MAAO,CACLmH,QAAS,OACT4P,eAAgB,SAChBC,WAAY,UAJhB,SAOE,eAAC,KAAD,YACIhE,GACA,cAAC,IAAD,CAAQpe,KAAK,UAAU8K,KAAK,QAAQwL,MAAM,QAAQwN,SAAS,SAASnK,UAAU,oBAA9E,8BAIDyE,GACC,cAAC,IAAD,CAAQpe,KAAK,UAAU8K,KAAK,QAAQwL,MAAM,QAAQd,SAAO,EAAzD,qCAWd,sBACEmE,UAAU,iBACVvO,MAAO,CAAE2Y,OAAQ,oBAAqBlX,QAAS,GAAIqF,MAAO,IAAMyG,OAAQ,OAAQtC,UAAW,IAF7F,UAIE,cAAC,KAAD,CACE6L,OAAO,EACPxP,MAAM,YACN2I,SAAQ,iBAAYmC,GACpBwG,MAAO,CACL,cAAC,IAAD,CAAQhkB,KAAK,UAAU8K,KAAK,QAAQwL,MAAM,QAAQlL,MAAO,CAAEuN,OAAQ,GAAK5L,QAAS,kBApWzF5I,QAAQC,IAAI,0BACZ+Z,GAAkB,IAmWV,kCAKJ,cAAC,KAAD,IACA,cAAC,KAAD,2BAAWqD,IAAX,IAAwB+B,WAAY7F,EAAcgB,QAASA,EAASuF,WAAY,CAAEC,SAAU,YCvjBrF,SAASC,GAAT,GAUX,IATFxjB,EASC,EATDA,QACAmV,EAQC,EARDA,gBACA7K,EAOC,EAPDA,cACA5C,EAMC,EANDA,cAGAuG,GAGC,EALDyO,iBAKC,EAJD1Q,MAIC,EAHDiC,IACA0O,EAEC,EAFDA,cACAC,EACC,EADDA,eAEMxb,EAAOqiB,cAAPriB,GACN,EAAwCK,mBAAS,IAAjD,mBAAOsb,EAAP,KAAqBC,EAArB,KACA,EAAgCvb,mBAAS,IAAzC,mBAAOiiB,EAAP,KAAiBC,EAAjB,KACA,EAAoCliB,mBAAS,GAA7C,mBAAmBmiB,GAAnB,WACA,EAAoCniB,mBAAS,GAA7C,mBAAOoiB,EAAP,KAAmBC,EAAnB,KACA,EAAwCriB,mBAAS,GAAjD,mBAAOsiB,EAAP,KAAqBC,EAArB,KACA,EAAwCviB,oBAAS,GAAjD,mBAAOwiB,EAAP,KAAqBC,EAArB,KACA,EAA4CziB,oBAAS,GAArD,mBAAO0iB,EAAP,KAAuBC,EAAvB,KACA,EAA8C3iB,oBAAS,GAAvD,mBAAO4iB,EAAP,KAAwBC,EAAxB,KACA,EAAgD7iB,oBAAS,GAAzD,mBAAO8iB,EAAP,KAAyBC,EAAzB,KACA,EAAwD/iB,oBAAS,GAAjE,mBAAOgjB,GAAP,KAA6BC,GAA7B,KACA,GAAgCjjB,oBAAS,GAAzC,qBAAOkjB,GAAP,MAAiBC,GAAjB,MAEA,GAAkDnjB,mBAAS,IAA3D,qBACA,IADA,YAC4DA,mBAAS,KAArE,qBAEMojB,IAFN,YAEuB,CAMrB,CACE9S,MAAO,UACPiM,UAAW,UACXnW,IAAK,UACLqW,OAAQ,SAAAle,GAAO,OACb,cAACwJ,EAAD,CAASxJ,QAASA,EAASoL,SAAS,OAAOzB,YAAawL,EAAiB7K,cAAeA,MAG5F,CACEyH,MAAO,UACPiM,UAAW,UACXnW,IAAK,WAEP,CACEkK,MAAO,SACPlK,IAAK,SACLqW,OAAQ,SAAC9T,EAAMkU,EAAQC,GAAf,OACN,mCACE,eAAC,KAAD,CAAOpU,KAAK,SAAZ,UACE,cAAC,IAAD,CAAQ9K,KAAK,UAAU8K,KAAK,QAAQiC,QAAS,kBA6CrC0Y,EA7CoDvG,OA8ChEwF,EAAe,IACjBhH,EAAa+H,GAAKC,QAAUhI,EAAa+H,GAAKC,QAAU,EACxDf,EAAgBD,EAAe,KAHnC,IAAkBe,GA7CR,oBAGA,cAAC,IAAD,CAAQzlB,KAAK,UAAU8K,KAAK,QAAQiC,QAAS,WAmCvD,IAAmB0Y,EACb/H,EADa+H,EAnCoDvG,GAoC/CwG,QAAU,IAC9BhI,EAAa+H,GAAKC,QAAUhI,EAAa+H,GAAKC,QAAU,EACxDf,EAAgBD,EAAe,KAtCzB,6BASJiB,GAAgB,CACpB,CACEjT,MAAO,UACPiM,UAAW,UACXnW,IAAK,UACLqW,OAAQ,SAAAle,GAAO,OACb,cAACwJ,EAAD,CAASxJ,QAASA,EAASoL,SAAS,OAAOzB,YAAawL,EAAiB7K,cAAeA,MAG5F,CACEyH,MAAO,gBACPiM,UAAW,QACXnW,IAAK,SAEP,CACEkK,MAAO,sBACPiM,UAAW,SACXnW,IAAK,SACLqW,OAAQ,SAAA+G,GACN,IAAIC,EAAWC,mBAAQF,EAAO3C,WAAY,SAE1C,OADA4C,EAAWxZ,WAAWwZ,GAAUpZ,QAAQ,GACjC,qCAAGoZ,EAAH,aAmBbxkB,qBAAU,WACJic,GACEA,EAAc8B,WAChBC,OAGH,CAAC/B,IAEJ,IAAM+B,GAAI,uCAAG,4BAAA5c,EAAA,sDACX0B,QAAQC,IAAI,QACZqb,KAEAH,GADIzZ,EAAe,YACY,aAAc2Z,IAC7CF,GAAiBzZ,EAAc,gBAAiBkgB,IAChDzG,GAAiBzZ,EAAc,eAAgBmgB,IANpC,2CAAH,qDAUJ1G,GAAgB,uCAAG,WAAOzZ,EAAc6Z,EAAW7Q,GAAhC,SAAApM,EAAA,sEACjB6a,EAAczX,GAAc8Z,eAAeD,GAD1B,OAEvBpC,EAAczX,GAAcnE,GAAGge,GAAW,WAAc,IAAD,uBAATxe,EAAS,yBAATA,EAAS,gBACrD,IAAI0e,EAAgB1e,EAAKA,EAAKO,OAAS,GAAGD,YAC1C,GAAIoe,GAAiBvX,EAAcwX,iBAAkB,CACnD,IAAIoG,EAAM/kB,EAAKglB,MAAMhlB,KACrB2N,EAASoX,OANU,2CAAH,0DAWtB,SAASzG,GAAayG,GACpB9hB,QAAQC,IAAI,kBACRwgB,GAAgBqB,EAAIE,OAASxlB,KAC/B8e,KACA8F,IAAY,IAIhB,SAASQ,GAAgBE,GACvB9hB,QAAQC,IAAI,mBACZqb,KAGF,SAASuG,GAAeC,GACtB9hB,QAAQC,IAAI,kBACZqb,KAGF,IAAMA,GAAU,uCAAG,kDAAAhd,EAAA,sEACM6a,EAAc8B,UAAUe,gBAAgBpe,GAD9C,cACXqe,EADW,OAEXgG,EAAYhG,EAAStB,OAASne,EAC9B0lB,EAAqBjG,EAASkG,WAC9BC,EAAcF,EAAmBtgB,SAASpF,GAChDskB,EAAmBsB,GACnBxB,EAAkBqB,GAClBjB,EAAoB/E,EAASI,UAC7B6E,GAAwBjF,EAASoG,MAC3B3D,EAAQzC,EAASyC,MACjB4D,EAAUX,mBAAQjD,EAAMI,WAAY,SAC1CwB,EAAcgC,GACdnC,EAAYlE,EAAStgB,MAErBykB,EAAcnE,EAASsG,MAAMhQ,YAdZ,UAeM4G,EAAc8B,UAAUuH,SAAS5kB,EAAIpB,GAf3C,QAeXgmB,EAfW,OAgBjB9B,EAAgB8B,GACXA,GACHhC,EAAgBvE,EAASsG,MAAMhQ,YAI7BzF,EAAO,GAEFiP,EAAI,EAxBI,aAwBDA,EAAImG,EAAmB5kB,QAxBtB,wBAyBTmlB,EAAOP,EAAmBnG,GAzBjB,UA0BM5C,EAAc8B,UAAUyH,kBAAkB9kB,EAAI6kB,GA1BpD,QA0BTE,EA1BS,OA2BXC,EACFD,EAAOrlB,OAAS,EACZqlB,EACG7O,IAAI8K,QACJpd,QAAO,SAAClD,EAAGukB,GACV,OAAOvkB,EAAIukB,KAEZva,QAAQ,GACX,IACS,EACfwE,EAAKyD,KAAK,CAAElM,IAAK0X,EAAGvf,QAASimB,EAAMlB,QAAS,EAAGuB,MAAOF,EAAWnB,OADlD,IApCA,QAwB8B1F,IAxB9B,yCAwCMgH,KAxCN,eAyCNtB,OAAOuB,SAAQ,SAACC,EAAGlH,GAC5BjP,EAAKiP,GAAG0F,OAASwB,KAGnBjjB,QAAQC,IAAI,qBACZuZ,EAAgB1M,GA9CC,4CAAH,qDAiDVoW,GAAS,uCAAG,oCAAA5kB,EAAA,6DAChB0B,QAAQC,IAAI,aACZmhB,IAAY,GAFI,SAGOjI,EAAc8B,UAAUe,gBAAgBpe,GAH/C,OAMhB,IAHMqe,EAHU,OAIVkH,EAAOlH,EAASkG,WAChBI,EAAQ,GACLxG,EAAI,EAAGA,EAAIxC,EAAajc,OAAQye,IACvCwG,EAAMhS,KAAK6S,KAAKC,KAAK9J,EAAawC,GAAGwF,SAASzC,YAPhC,OAUVnT,EAASlB,EAAG2O,EAAe6B,UAAUqI,WAAW1lB,EAAIulB,EAAMZ,IAAQ,SAAAtF,GACtEjd,QAAQC,IAAI,mCAA0Bgd,IAClCA,GAA6B,cAAlBA,EAAOzE,QAA4C,IAAlByE,EAAOzE,QAGrDxY,QAAQC,IAAI,gBAAiBgd,EAAOzE,QACpC4I,IAAY,IAHZphB,QAAQC,IAAI,6BAAqBgd,EAAOxX,KAAO,iBAMnDzF,QAAQC,IAAI,2CAA4C0L,GAnBxC,KAoBhB3L,QApBgB,UAoBE2L,EApBF,yBAoBR1L,IApBQ,4DAAH,qDAyBf,GAAoChC,mBAAS,CAAEkkB,WAAY,KAAMV,OAAQ,OAAzE,qBAAO8B,GAAP,MAEMR,IAFN,MAEqB,uCAAG,gDAAAzkB,EAAA,sEACC6a,EAAc8B,UAAUe,gBAAgBpe,GADzC,OAChBqe,EADgB,OAKhBuH,EAAmB5E,OAAO+C,mBAAQ1F,EAASyC,MAAMI,WAAY,UAG/D2E,EAAoB,EAEpBtB,EAAa,GACbuB,EAAe,GACfC,EAAc,GACdjC,EAAW,GAEN3F,EAAI,EAfS,aAeNA,EAAIE,EAASkG,WAAW7kB,QAflB,wBAgBhBsmB,EAAY3H,EAASkG,WAAWpG,GAhBhB,UAmBQ5C,EAAc8B,UAAUyH,kBAAkB9kB,EAAIgmB,GAnBtD,QAmBhBC,EAnBgB,OAsBhBC,EAAwBV,KAAKW,IAC/BF,EAAgB/P,IAAI8K,QAAQpd,QAAO,SAACwiB,EAAGC,GACrC,OAAOD,EAAIC,IACV,GACH,GAIFR,GAAqBK,EAErB3B,EAAW5R,KAAKqT,GAChBF,EAAanT,KAAKuT,GAjCE,QAe0B/H,IAf1B,+BAoCtB4H,EAAcD,EAAa5P,KAAI,SAAAoQ,GAC7B,OAAyB,GAArBT,EACK,EAEFS,EAAIT,KAKb/B,EAAWiC,EAAY7P,KAAI,SAAAoQ,GACzB,OAAOV,EAAmBU,KAE5BlkB,QAAQC,IAAI,CAAEyhB,aAEd6B,GAAWpB,WAAaA,EACxBoB,GAAW9B,OAASC,EAAS5N,IAAIqQ,QAAQrQ,KAAI,SAAAoQ,GAC3C,IAAIE,EAAQxF,OAAOsF,GAEnB,OADAE,EAAQA,EAAM9b,QAAQ,IACfuW,iBAAMuF,KACZ,GAvDmB,kBA2Dfb,IA3De,4CAAH,sDA8Dfc,GAAW,uCAAG,4BAAA/lB,EAAA,sDAClBykB,KACA/iB,QAAQC,IAAI,eACN0L,EAASlB,EAAG2O,EAAe6B,UAAUoJ,YAAYzmB,IAAK,SAAAqf,GAC1Djd,QAAQC,IAAI,mCAA0Bgd,IAClCA,GAA6B,cAAlBA,EAAOzE,QAA4C,IAAlByE,EAAOzE,QACrDxY,QAAQC,IAAI,6BAAqBgd,EAAOxX,KAAO,iBAGnDzF,QAAQC,IAAI,2CAA4C0L,GATtC,2CAAH,qDAYX2Y,GAAY,uCAAG,4BAAAhmB,EAAA,6DACnB0B,QAAQC,IAAI,gBACZD,QAAQC,IAAI,CAAEsjB,gBAFK,SAGIpK,EAAc8B,UAAUe,gBAAgBpe,GAH5C,OAGbqe,EAHa,OAInBjc,QAAQC,IAAI,CAACgc,aACiB,QAAzBA,EAASsI,aACZ9Z,EACE2O,EAAe6B,UAAUuJ,eAAe5mB,EAAI2lB,GAAWpB,WAAYoB,GAAW9B,OAAQ,CACpFrf,MAAO6Z,EAASyC,MAChB7S,SAAU,UAIc,QAAzBoQ,EAASsI,aACZ9Z,EACE2O,EAAe6B,UAAUuJ,eAAe5mB,EAAI2lB,GAAWpB,WAAYoB,GAAW9B,OAAQ,CACpF5V,SAAU,UAhBG,2CAAH,qDAuBlB,OACE,mCACE,qBACE2J,UAAU,cACVvO,MAAO,CAAE2Y,OAAQ,oBAAqBlX,QAAS,GAAIqF,MAAO,IAAKyG,OAAQ,OAAQtC,UAAW,IAF5F,SAIE,eAAC,KAAD,CACE6L,OAAO,EACPiB,OAAQ,kBAAM3b,OAAOsC,QAAQ8e,QAC7BlW,MAAO2R,EACPL,MAAO,CACLc,GAAkBI,GAChB,cAAC,IAAD,CAAQllB,KAAK,SAAS8K,KAAK,QAAQM,MAAO,CAAEuN,OAAQ,GAAK5L,QAAS,kBAAMyb,MAAxE,iBAIF1D,IAAmBI,IAAqBE,IACtC,cAAC,IAAD,CAAQplB,KAAK,SAAS8K,KAAK,QAAQM,MAAO,CAAEuN,OAAQ,GAAK5L,QAAS,kBAAM0b,MAAxE,iCAIFvD,IAAqBN,GACnB,cAAC,IAAD,CAAQ5kB,KAAK,UAAU8K,KAAK,QAAQM,MAAO,CAAEuN,OAAQ,GAAK5L,QAAS,kBAAMsa,MAAa7R,QAAS8P,GAA/F,sCAhBN,UAsBE,4CAAejB,KACf,eAAC,KAAD,CAAOwE,MAAO,cAAC,KAAD,CAAS7oB,KAAK,aAA5B,UACE,6DAAgCwkB,EAAhC,UACA,mDAAsBE,KACtB,0CACWQ,GAAoB,2CAC3BA,GAAoB,kDAG1B,cAAC,KAAD,IACCA,GAAoBF,IAAoBJ,GACvC,cAAC,KAAD,CAAOrB,WAAY7F,EAAcgB,QAAS8G,GAAgBvB,WAAY,CAAEC,SAAU,OAEjFc,GAAmBJ,IAAiBM,IACrC,cAAC,KAAD,CAAO3B,WAAY7F,EAAcgB,QAASiH,GAAe1B,WAAY,CAAEC,SAAU,KAEnF,cAAC,KAAD,IAMCU,GAAgB,gE,gCC5YR1I,KAAXC,O,sCCuLO2M,ICpKPzlB,GAAWC,EAAQ,IAAnBD,OAuBF0lB,GAAgB9b,GAASO,QAGzBwb,IAAQ,EAUd,IAAMC,GAAsBha,UAAUC,OAClC,IAAI7L,GAAO6lB,UAAUC,sBAAsB,oCAC3C,KACEC,GAAgBna,UAAUC,OAC5B,IAAI7L,GAAO6lB,UAAUC,sBAAsB,gCAAkCnc,IAC7E,KAIEqc,GAAmBN,GAAc5b,OAEjCmc,GAA0BC,oIAAYC,mBAAqBD,oIAAYC,mBAAqBH,GAElG,IAAMhhB,GAAgB,IAAIhF,GAAO6lB,UAAUC,sBAAsBG,IAGpDre,GAAgB8d,GAAc9d,cAQrCwe,GALa,IAAIC,IAAW,CAChCC,QAAS,aAI2BC,iBAAX,uCAA4D5c,IAAa,GAK9F+I,GAAY,IAAI8T,IAAU,CAC9B/a,QAAS,UACTgb,eAAe,EACfxN,MAAO,QACPyN,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTnb,QAAS,CACPob,OAAQ,2CACRC,SAAUpd,GACVqd,IAAK,CACH,EAAE,gCAAF,OAAmCrd,IACnC,IAAK,6BAOX,oBAAqB,CACnBuF,QAAS,CACP+X,KAAM,4GACNxqB,KAAM,WACN2Q,YAAa,iDAEfwZ,QAASR,GACTc,UAAU,WAAD,4BAAE,WAAOvpB,EAAU+N,GAAjB,SAAAtM,EAAA,sEACHzB,EAASwpB,SADN,gCAEFxpB,GAFE,2CAAF,qDAAC,OAwZDypB,OAhZf,SAAargB,GACX,IAAM0L,EAAkBmT,IAAuBA,GAAoByB,SAAWzB,GAAsBG,GAEpG,EAAgDhnB,qBAAhD,mBAAOgG,EAAP,KAAyBuiB,EAAzB,KACA,EAA8BvoB,qBAA9B,mBAAOzB,EAAP,KAAgBia,EAAhB,KAEM3E,EAAiB,uCAAG,sBAAAxT,EAAA,sEAClBsT,GAAU6U,sBADQ,WAEpBxiB,IAAoBA,EAAiBpH,UAA2D,mBAAxCoH,EAAiBpH,SAAS6pB,WAF9D,gCAGhBziB,EAAiBpH,SAAS6pB,aAHV,OAKxBlkB,YAAW,WACTa,OAAO+B,SAASwL,WACf,GAPqB,2CAAH,qDAWjBpI,ECzIO,SAA0Boc,EAAejT,EAAiB3T,GACvE,MAA0BC,mBAAS,GAAnC,mBAAOuK,EAAP,KAAcme,EAAd,KAuBA,OAFAlpB,aAnBkB,WAAM,4CACtB,gCAAAa,EAAA,yDACMqT,EADN,yCAEW,GAFX,WAGMiT,EAAcpc,MAHpB,gBAIIme,EAAS/B,EAAcpc,OAJ3B,8BAMUjM,EAAM,IAAIqqB,IACdjV,EAAgBhH,QAAUgH,EAAgBhH,QAAQhK,QAAU,EAC5D,6CACA,IATN,SAWuBkmB,IAAQC,cAAcvqB,EAAKwqB,IAAKxqB,EAAIoE,SAAUgR,GAXrE,OAWUqV,EAXV,OAYUC,EAAQ,IAAIC,IAAM,CAACF,GAAOD,IAAKxqB,EAAIoE,UACzCgmB,EAASze,WAAW+e,EAAME,SAASC,cAAc,KAbrD,6CADsB,uBAAC,WAAD,wBAiBtBC,KAEmBrpB,GAAY,MAE1BwK,EDiHO8e,CAAiB1C,GAAejT,GAGxClI,EE5IO,SAAqBmb,EAAe/G,GACjD,MAAgC5f,qBAAhC,mBAAOwL,EAAP,KAAiB8d,EAAjB,KACMC,EAAY,uCAAG,sBAAAlpB,EAAA,sDACfsmB,EAAcxjB,eAAe,YAC/BmmB,EAAY3C,EAAcnb,UAEvBqB,UAAUC,QACX0c,IACGC,IAAI,kDACJ7jB,MAAK,SAAA8jB,GACJ,IAAMC,EAA+C,IAAjCD,EAAS7a,KAAK+Q,GAAS,QACvC+J,IAAgBne,GAClB8d,EAAYK,MAGfC,OAAM,SAAArjB,GAAK,OAAIxE,QAAQC,IAAIuE,MAbf,2CAAH,qDAmBlB,OADA/G,YAAU+pB,EAAc,OACjB/d,EFuHUqe,CAAYlD,GAAe,QAEtClT,EAAa1N,EAAcC,EAAkBC,IAEnDhH,qBAAU,WAAM,4CACd,4BAAAoB,EAAA,0DACMoT,EADN,gCAE6BA,EAAW1O,aAFxC,OAEU8L,EAFV,OAGI2H,EAAW3H,GAHf,4CADc,uBAAC,WAAD,wBAOd9L,KACC,CAAC0O,IAGJ,IAAMqW,EAAe7jB,IAAiBA,GAAcqiB,UAAYriB,GAAcqiB,SAAS5lB,QACjFqnB,EACJtW,GAAcA,EAAW7U,UAAY6U,EAAW7U,SAAS0pB,UAAY7U,EAAW7U,SAAS0pB,SAAS5lB,QAK9F8J,EAAKF,GAAWmH,EAAYjI,GAG5Bwe,EAAW1d,GAAWrG,GAAeuF,GAGrCyP,EAAmBnb,EAAWmG,GAAe1H,GAG7C0rB,EAAqBnqB,EAAW4T,EAAiBnV,GAGjD2c,EAAgB/Z,EAAkB8E,IAGlCkV,EAAiBha,EAAkBsS,EAAY,CAAE/Q,QAASonB,IAK1D9O,EAAmB7Z,EAAkBuS,GAQf5P,EAAkBkX,EAAkB,MAAO,YAAa,CAClF,+CAIclX,EAAkBoX,EAAe,eAAgB,WGpLpD,SAA0B7c,EAAWoF,EAAc6Z,EAAW1e,EAAUsrB,EAAYprB,GACjG,MAA8BkB,mBAAS,IAAvC,mBAAOmqB,EAAP,KAAgBC,EAAhB,KAEAnrB,qBAAU,WAKR,GAJwB,qBAAbL,GAAkD,qBAAfsrB,GAE5CtrB,EAASyrB,iBAAiBH,GAExB7rB,GAAaoF,GAAgBpF,EAAUoF,GACzC,IAKE,OAJApF,EAAUoF,GAAcnE,GAAGge,GAAW,WAAc,IAAD,uBAATxe,EAAS,yBAATA,EAAS,gBACjD,IAAMM,EAAcN,EAAKA,EAAKO,OAAS,GAAGD,YAC1CgrB,GAAW,SAAAE,GAAQ,oBAAOlrB,eAAgBN,EAAKglB,MAAMhlB,OAAlC,mBAA6CwrB,UAE3D,WACLjsB,EAAUoF,GAAc8Z,eAAeD,IAEzC,MAAOxa,GACPf,QAAQC,IAAIc,MAGf,CAAClE,EAAUsrB,EAAY7rB,EAAWoF,EAAc6Z,IHkK1BiN,CAAiBrP,EAAe,eAAgB,aAAcjV,GAAe,GAUtGhH,qBAAU,WAEN2nB,KAsBD,CACDlT,EACAnV,EACAwrB,EACA9O,EACAgP,EACA/O,EACAC,EACAH,IAGF,IAAIwP,EAAiB,GACrB,GAAoBV,GAAgBC,GAAmBD,IAAiBC,EAAiB,CACvF,IAAMU,EAAkBte,GAAQ4d,GAC1BW,EAAeve,GAAQ2d,GAE3BU,EADsB,OAApBT,GAA6C,QAAjBD,EAE5B,qBAAK9gB,MAAO,CAAE2hB,OAAQ,EAAGnQ,SAAU,WAAYC,MAAO,EAAGmQ,IAAK,GAAIngB,QAAS,IAA3E,SACE,cAAC,IAAD,CACE2D,QAAQ,gCACRC,YACE,4CACW,8CADX,+CAC2E,sCAD3E,yBAGE,6FAGJzQ,KAAK,QACLitB,UAAU,MAMd,qBAAK7hB,MAAO,CAAE2hB,OAAQ,EAAGnQ,SAAU,WAAYC,MAAO,EAAGmQ,IAAK,GAAIngB,QAAS,IAA3E,SACE,cAAC,IAAD,CACE2D,QAAQ,6BACRC,YACE,4CACW,4BAAIoc,GAAmBA,EAAgB/sB,OADlD,kCAC2F,IACzF,cAAC,IAAD,CACEiN,QAAO,sBAAE,gCAAAtK,EAAA,6DACDyqB,EAAW1lB,OAAO0lB,SAClBjc,EAAO,CACX,CACEnM,QAAS,KAAOikB,GAAcjkB,QAAQme,SAAS,IAC/CkK,UAAWpE,GAAcjpB,KACzBstB,eAAgBrE,GAAcqE,eAC9BC,QAAS,CAACtE,GAAc5b,QACxBmgB,kBAAmB,CAACvE,GAAc9d,iBAGtC9G,QAAQC,IAAI,OAAQ6M,GAXb,SAYUic,EAASK,QAAQ,CAAEC,OAAQ,0BAA2BC,OAAQxc,IAAQ+a,QAZhF,QAYDpd,EAZC,SAcLzK,QAAQC,IAAIwK,GAdP,2CADX,SAmBE,4BAAIke,GAAgBA,EAAahtB,SArBrC,OA0BFE,KAAK,QACLitB,UAAU,WAMlBL,EACE,qBAAKxhB,MAAO,CAAE2hB,QAAS,EAAGnQ,SAAU,WAAYC,MAAO,IAAKmQ,IAAK,GAAIngB,QAAS,GAAIvB,MAAOyd,GAAczd,OAAvG,SACGyd,GAAcjpB,OAKrB,IAAMkW,EAAgBxT,sBAAW,sBAAC,4BAAAC,EAAA,sEACTsT,GAAU7M,UADD,OAC1BlI,EAD0B,OAEhC2pB,EAAoB,IAAItnB,GAAO6lB,UAAUwE,aAAa1sB,IAEtDA,EAASU,GAAG,gBAAgB,SAAAoD,GAC1BX,QAAQC,IAAR,2BAAgCU,EAAhC,yBACA6lB,EAAoB,IAAItnB,GAAO6lB,UAAUwE,aAAa1sB,OAGxDA,EAASU,GAAG,mBAAmB,WAC7ByC,QAAQC,IAAR,oBACAumB,EAAoB,IAAItnB,GAAO6lB,UAAUwE,aAAa1sB,OAIxDA,EAASU,GAAG,cAAc,SAACisB,EAAMC,GAC/BzpB,QAAQC,IAAIupB,EAAMC,GAClB3X,OAjB8B,2CAmB/B,CAAC0U,IAEJtpB,qBAAU,WACJ0U,GAAUI,gBACZH,MAED,CAACA,IAEJ,MAA0B5T,qBAA1B,mBAAOgpB,EAAP,KAAcyC,EAAd,KACAxsB,qBAAU,WACRwsB,EAASrmB,OAAO+B,SAASC,YACxB,CAACqkB,IAEJ,IAAIC,EAAa,GACXC,EAAkB1lB,IAAiBA,GAAc2lB,aAAuD,IAAzCjF,GAAcjpB,KAAK2J,QAAQ,SAEhG,GAA0CrH,oBAAS,GAAnD,qBAAO6rB,GAAP,MAAsBC,GAAtB,MA2BA,OAzBGD,IACD5lB,IACAA,GAAcqiB,UACqB,QAAnCriB,GAAcqiB,SAAS5lB,SACvBuY,GACAha,GAAOJ,MAAMuJ,YAAY6Q,IAAqB,IAE9CyQ,EACE,qBAAK1iB,MAAO,CAAEyB,QAAS,IAAvB,SACE,cAAC,IAAD,CACE7M,KAAK,UACL+M,QAAS,WACPqf,EAAS,CACP1W,GAAI/U,EACJ4F,MAAOlD,GAAOJ,MAAMwS,WAAW,UAEjCyY,IAAiB,IAPrB,qEAiBJ,sBAAKvU,UAAU,MAAf,UAEE,cAACyB,GAAD,IACCwR,EACD,eAAC,IAAD,WACE,eAAC,IAAD,CAAMxhB,MAAO,CAAEkM,UAAW,UAAY6W,aAAc,CAAC/C,GAAQ/Y,KAAK,aAAlE,UACE,cAAC,IAAKgQ,KAAN,UACE,cAAC,IAAD,CACEtV,QAAS,WACP8gB,EAAS,MAEXnY,GAAG,IAJL,iCADa,KAUf,cAAC,IAAK2M,KAAN,UACE,cAAC,IAAD,CACEtV,QAAS,WACP8gB,EAAS,eAEXnY,GAAG,aAJL,wBADa,iBAYjB,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0Y,OAAK,EAACC,KAAK,IAAlB,SAOE,cAACroB,GAAD,CACElG,KAAK,YACL2E,OAAQoR,EACR7U,SAAUqH,GACV1H,QAASA,EACTsK,cAAeA,OAGnB,cAAC,IAAD,CAAOojB,KAAK,cAAZ,SACE,cAAClK,GAAD,CACExjB,QAASA,EACTkV,WAAYA,EACZC,gBAAiBA,EACjBzN,cAAeA,GACfgV,iBAAkBA,EAClB1Q,MAAOA,EACPiC,GAAIA,EACJ2O,eAAgBA,EAChBD,cAAeA,MAGnB,cAAC,IAAD,CAAO+Q,KAAK,aAAZ,SACE,cAAClR,GAAD,CACExc,QAASA,EACTkV,WAAYA,EACZC,gBAAiBA,EACjBzN,cAAeA,GACfgV,iBAAkBA,EAClB1Q,MAAOA,EACPiC,GAAIA,EACJ2O,eAAgBA,EAChBD,cAAeA,YAmBvB,cAAC,GAAD,IAGA,sBAAKlS,MAAO,CAAEwR,SAAU,QAAStF,UAAW,QAASuF,MAAO,EAAGmQ,IAAK,EAAGngB,QAAS,IAAhF,UACE,cAAC+I,GAAD,CACEjV,QAASA,EACT0H,cAAeA,GACfwN,WAAYA,EACZC,gBAAiBA,EACjBnJ,MAAOA,EACPoJ,UAAWA,GACXC,cAAeA,EACfC,kBAAmBA,EACnBhL,cAAeA,KAEhB6iB,KAIH,sBAAK1iB,MAAO,CAAEwR,SAAU,QAAStF,UAAW,OAAQgX,KAAM,EAAGxR,OAAQ,GAAIjQ,QAAS,IAAlF,UACE,eAAC,IAAD,CAAK+R,MAAM,SAAS2P,OAAQ,CAAC,EAAG,GAAhC,UACE,cAAC,IAAD,CAAKlX,KAAM,EAAX,SACE,cAACiE,GAAD,CAAM3O,MAAOA,EAAOhM,QAASA,EAAS+a,SAAUzO,OAGlD,cAAC,IAAD,CAAKoK,KAAM,EAAGjM,MAAO,CAAEkM,UAAW,SAAUC,QAAS,IAArD,SACE,cAAC2D,GAAD,CAAUtN,SAAUA,MAEtB,cAAC,IAAD,CAAKyJ,KAAM,EAAGjM,MAAO,CAAEkM,UAAW,SAAUC,QAAS,GAArD,SACE,eAAC,IAAD,CACExK,QAAS,WACPvF,OAAO6I,KAAK,iDAEdvF,KAAK,QACLwL,MAAM,QALR,UAOE,sBAAMlL,MAAO,CAAE0O,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BAPF,kBAeJ,cAAC,IAAD,CAAK6E,MAAM,SAAS2P,OAAQ,CAAC,EAAG,GAAhC,SACE,cAAC,IAAD,CAAKlX,KAAM,GAAX,SAGI0W,EACE,cAACrT,GAAD,CAAQrS,cAAeA,GAAesE,MAAOA,EAAOrC,YAAawL,IAEjE,cI3fV4G,GAAS,CACbO,KAAK,GAAD,OAAKsM,IAAL,mBACJrM,MAAM,GAAD,OAAKqM,IAAL,qBAGDiF,GAAYhnB,OAAOC,aAAaC,QAAQ,SAExC+mB,GAAc,kEAEdC,GAAS,IAAIC,IAAa,CAC9BC,IAAKH,GACLlnB,MAAO,IAAIsnB,MAGbC,IAASjQ,OACP,cAACkQ,EAAA,EAAD,CAAgBL,OAAQA,GAAxB,SACE,cAAC,IAAD,CAAuBM,SAAUtS,GAAQuS,aAAcT,IAAa,QAApE,SACE,cAAC,GAAD,CAAKC,YAAaA,SAGtBS,SAASC,eAAe,U","file":"static/js/main.07e2b27e.chunk.js","sourcesContent":["const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n      GTC: {\n        address: \"0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      }\n    },\n  },\n};\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"4991f6cf93a54d05a36299de9259d3ee\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if(!e.error && e.message){\n          message = e.message\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try{\n          let obj = JSON.parse(message)\n          if(obj && obj.body){\n            let errorObj = JSON.parse(obj.body)\n            if(errorObj && errorObj.error && errorObj.error.message){\n              message = errorObj.error.message\n            }\n          }\n        }catch(e){\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {/* {scanner} */}\n      <Input\n        size=\"large\"\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"false\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        style={{ width: 500 }}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"ETH\" : \"USD\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      size=\"large\"\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  );\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    if (isQueryable(fn)) {\n      // If there are no inputs, just display return value\n      return (\n        <DisplayVariable\n          key={fn.name}\n          contractFunction={contract[fn.name]}\n          functionInfo={fn}\n          refreshRequired={refreshRequired}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    // If there are inputs, display a form to allow users to provide these\n    return (\n      <FunctionForm\n        key={\"FF\" + fn.name}\n        contractFunction={\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n            ? contract[fn.name]\n            : contract.connect(signer)[fn.name]\n        }\n        functionInfo={fn}\n        provider={provider}\n        gasPrice={gasPrice}\n        triggerRefresh={triggerRefresh}\n      />\n    );\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/austintgriffith/scaffold-eth\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"🤑 Quadratic Diplomacy\"\n        subTitle=\"Protocol for open-source quadratic contribution voting\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { PageHeader, Carousel } from \"antd\";\nimport { toWei, fromWei } from \"web3-utils\";\nimport { Button, Divider, Input, InputNumber, List, Table, Modal, Form, Select, Space, Tag, Descriptions } from \"antd\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Address, Balance } from \"../components\";\n\nimport { useEventListener, useOnBlock } from \"../hooks\";\nimport AddressInput from \"../components/AddressInput\";\nimport EtherInput from \"../components/EtherInput\";\n\nimport { mainnetProvider, blockExplorer } from \"../App\";\n\nimport \"../index.css\";\n\nconst { Option } = Select;\n\nexport default function Elections({\n  address,\n  mainnetProvider,\n  localProvider,\n  mainnetContracts,\n  userSigner, \n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [numElections, setNumElections] = useState(0);\n  const [tableDataSrc, setTableDataSrc] = useState([]);\n  const [newElecName, setNewElecName] = useState(\"\");\n  const [newElecAllocatedVotes, setNewElecAllocatedVotes] = useState(null);\n  const [newElecAllocatedFunds, setNewElecAllocatedFunds] = useState(null);\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n\n  const [form] = Form.useForm();\n\n  const route_history = useHistory();\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  function viewElection(record) {\n    route_history.push(\"/voting/\" + record.key);\n  }\n\n  const columns = [\n    {\n      title: \"Created\",\n      dataIndex: \"created_date\",\n      key: \"created_date\",\n      width: 150,\n      align: \"center\",\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: 150,\n      align: \"center\",\n    },\n    {\n      title: \"Admin\",\n      dataIndex: \"admin\",\n      key: \"admin\",\n      width: 250,\n      align: \"center\",\n      render: admin => (\n        <Address address={admin} fontSize=\"14pt\" ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ),\n    },\n    {\n      title: \"Role\",\n      dataIndex: \"roles\",\n      key: \"roles\",\n      align: \"center\",\n      render: roles =>\n        roles.map(r => {\n          //   let color = tag.length > 5 ? 'geekblue' : 'green';\n          //   if (tag === 'loser') {\n          //     color = 'volcano';\n          //   }\n          let color = \"geekblue\";\n          if (r == \"candidate\") {\n            color = \"green\";\n          }\n          return (\n            <Tag color={color} key={r}>\n              {r.toLowerCase()}\n            </Tag>\n          );\n        }),\n    },\n    {\n      title: \"Candidates\",\n      dataIndex: \"n_workers\",\n      key: \"n_workers\",\n      align: \"center\",\n    },\n    {\n      title: \"Voted\",\n      dataIndex: \"n_voted\",\n      key: \"n_voted\",\n      align: \"center\",\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"status\",\n      key: \"status\",\n      align: \"center\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record, index) => (\n        <>\n          <Space size=\"middle\">\n            <Button type=\"default\" size=\"small\" shape=\"round\" onClick={() => viewElection(record)}>\n              View\n            </Button>\n          </Space>\n        </>\n      ),\n    },\n  ];\n  useEffect(() => {\n    if (readContracts) {\n      if (readContracts.Diplomacy) {\n        console.log(\"readContracts\");\n        init();\n      }\n    }\n  }, [readContracts]);\n\n  const init = async () => {\n    console.log(\"contract loaded \", address);\n    //listen to events\n    let contractName = \"Diplomacy\";\n    addEventListener(contractName, \"ElectionCreated\", onElectionCreated);\n    addEventListener(contractName, \"BallotCast\", onBallotCast);\n    updateView();\n  };\n\n  const addEventListener = async (contractName, eventName, callback) => {\n    await readContracts[contractName].removeListener(eventName);\n    readContracts[contractName].on(eventName, (...args) => {\n      let eventBlockNum = args[args.length - 1].blockNumber;\n      if (eventBlockNum >= localProvider._lastBlockNumber) {\n        callback();\n      }\n    });\n  };\n\n  function onElectionCreated() {\n    console.log(\"onElectionCreated\");\n    setIsCreating(false);\n    form.resetFields();\n    if (slider && slider.current) {\n      slider.current.goTo(0);\n    }\n    updateView();\n  }\n\n  function onBallotCast() {\n    console.log(\"onBallotCast\");\n    updateView();\n  }\n\n  const updateView = async () => {\n    console.log(\"updateView \");\n    setTableDataLoading(true);\n    const numElections = (await readContracts.Diplomacy.numElections()).toNumber();\n    // console.log(\"numElections \", numElections);\n    setNumElections(numElections);\n    let data = [];\n    let elections = [];\n    for (let i = 0; i < numElections; i++) {\n      const election = await readContracts.Diplomacy.getElectionById(i);\n      //   console.log(\"election \", election);\n      const name = election.name;\n      const n_addr = election.n_addr.toNumber();\n      const n_voted = (await readContracts.Diplomacy.getElectionVoted(i)).toNumber();\n\n      let status = \"Active\";\n      if (!election.isActive) {\n        status = \"Inactive\";\n      }\n      let created_date = new Date(election.createdAt.toNumber() * 1000);\n      created_date = created_date.toISOString().substring(0, 10);\n      let admin = election.admin;\n      let roles = [];\n      const isAdmin = election.admin == address;\n      if (isAdmin) {\n        roles.push(\"admin\");\n      }\n      const isCandidate = await readContracts.Diplomacy.canVote(i, address);\n      if (isCandidate) {\n        roles.push(\"candidate\");\n      }\n      data.push({\n        key: i,\n        created_date: created_date,\n        name: name,\n        n_workers: n_addr,\n        n_voted: n_voted,\n        admin: admin,\n        roles: roles,\n        status: status,\n      });\n    }\n    data = data.reverse();\n    setTableDataSrc(data);\n    setTableDataLoading(false);\n  };\n\n  const createNewElection = () => {\n    console.log(\"createNewElection\");\n    setIsModalVisible(true);\n  };\n\n  const onFinish = async () => {\n    setIsCreating(true);\n    console.log({ newElecAllocatedFunds });\n    console.log({ newElecAllocatedVotes });\n    console.log({ newElecName });\n    console.log({ addresses });\n    const result = tx(\n      // writeContracts.Diplomacy.newElection(newElecName, newElecAllocatedFunds, newElecAllocatedVotes, addresses),\n      writeContracts.Diplomacy.newElection(newElecName, newElecAllocatedFunds, fundsType, newElecAllocatedVotes, addresses),\n      update => {\n        console.log(\"📡 Transaction Update:\", update);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n        } else {\n          console.log(\"update error \", update.status);\n          setIsCreating(false);\n        }\n      },\n    );\n  };\n\n  // const tokenAddress = writeContracts.UNI.address;\n  // const userAddress = userSigner.getAddress();\n  // const tokenContract = writeContracts.UNI.connect(userSigner);\n  // approve only if have to pay from self wallet\n  // if (payFromSelf) {\n    // await tx(\n    //   tokenContract.approve(\n    //     writeContracts.QuadraticDiplomacyContract.address,\n    //     ethers.utils.parseUnits(totalRewardAmount.toString(), 18),\n    //   ),\n    // );\n  // }\n\n  const approve = async () => {\n  const tokenAddress = writeContracts[\"UNI\"].address;\n  const userAddress = await userSigner.getAddress();\n  const tokenContract = writeContracts[\"UNI\"].connect(userSigner);\n    const res = tx(\n      // writeContracts.Diplomacy.approveToken(), \n      tokenContract.approve(\n        writeContracts.Diplomacy.address,\n        10000,\n      ),\n      update => {\n        console.log(\"📡 Transaction Update:\", update);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n        } else {\n          console.log(\"update error \", update.status);\n          setIsCreating(false);\n        }\n      },\n    )\n  }\n  const tokenPayout = async () => {\n    const res = tx(\n      writeContracts.Diplomacy._tokenPayout({gasLimit: 12450000}), \n      update => {\n        console.log(\"📡 Transaction Update:\", update);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n        } else {\n          console.log(\"update error \", update.status);\n          setIsCreating(false);\n        }\n      },\n    )\n  }\n\n  const slider = useRef(null);\n\n  const [addresses, setAddresses] = useState([]);\n  const [toAddress, setToAddress] = useState(\"\");\n\n  const [canContinue, setCanContinue] = useState(false);\n  const [tableDataLoading, setTableDataLoading] = useState(false);\n  const [fundsType, setFundsType] = useState(\"ETH\");\n\n  let table_state = {\n    bordered: true,\n    loading: tableDataLoading,\n  };\n\n  const selectFundsType = (\n    <Select defaultValue=\"ETH\" \n      className=\"select-funds-type\" \n      onChange={ value => { setFundsType(value); } }>\n      <Option value=\"ETH\">ETH</Option>\n      <Option value=\"GTC\">GTC</Option>\n    </Select>\n  );\n\n  return (\n    <>\n      <Modal visible={isModalVisible} footer={false} onCancel={handleCancel} width={700}>\n        <Form\n          form={form}\n          name=\"basic\"\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 16 }}\n          initialValues={{ remember: false }}\n          onFinish={onFinish}\n        >\n          <Carousel ref={slider} afterChange={() => {}} speed=\"300\" dots={false}>\n            <div>\n              <PageHeader\n                ghost={false}\n                title=\"Create A New Election\"\n                // subTitle=\"Election Options\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              />\n              <Form.Item\n                name=\"elec_name\"\n                label=\"Name\"\n                rules={[{ required: true, message: \"Please input election name!\" }]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder=\"Election Name\"\n                  autoComplete=\"false\"\n                  allowClear={true}\n                  onChange={e => {\n                    e.target.value ? setNewElecName(e.target.value) : null;\n                  }}\n                />\n              </Form.Item>\n              <Form.Item\n                name=\"funds\"\n                label=\"Funds\"\n                // rules={[{ required: true, pattern: new RegExp(/^[0-9]+$/), message: \"ETH Funds Required!\" }]}\n                rules={[{ required: true, pattern: new RegExp(/^[0-9]+$/), message: \"Funding is Required!\" }]}\n              >\n                {/* <EtherInput\n                  type=\"number\"\n                  price={price}\n                  value={newElecAllocatedFunds}\n                  placeholder=\"Enter amount\"\n                  onChange={value => {\n                    if (!isNaN(Number(value))) {\n                      let weiValue = toWei(Number(value).toFixed(18).toString());\n                      setNewElecAllocatedFunds(weiValue);\n                      setCanContinue(true);\n                    } else {\n                      setCanContinue(false);\n                    }\n                  }}\n                /> */}\n              <Input \n                addonBefore={selectFundsType} \n                placeholder=\"Enter Amount\"\n                size=\"large\"\n                allowClear={true}\n                value={newElecAllocatedFunds}\n                onChange={e => {\n                  if (!isNaN(Number(e.target.value))) {\n                    let funds; \n                    if (fundsType === \"ETH\") {\n                      funds = toWei(Number(e.target.value).toFixed(18).toString());\n                    } else if (fundsType === \"GTC\") {\n                      funds = toWei(Number(e.target.value).toFixed(18).toString()); // * 10^18 for Tokens??\n                    }\n                    setNewElecAllocatedFunds(funds);\n                  }\n                }}\n              />\n              </Form.Item>\n              <Form.Item\n                name=\"votes\"\n                label=\"Vote Allocation\"\n                rules={[\n                  { required: true, message: \"Please input number of votes!\" },\n                  { pattern: new RegExp(/^[0-9]+$/), message: \"Invalid Vote Allocation!\" },\n                ]}\n              >\n                <InputNumber\n                  size=\"large\"\n                  placeholder=\"1\"\n                  onChange={value => {\n                    setNewElecAllocatedVotes(value);\n                  }}\n                />\n              </Form.Item>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Divider>\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    shape=\"round\"\n                    onClick={() => {\n                      slider.current.next();\n                    }}\n                    //disabled={!canContinue}\n                  >\n                    Continue\n                  </Button>\n                </Divider>\n              </div>\n            </div>\n\n            <div>\n              <PageHeader\n                ghost={false}\n                onBack={() => {\n                  slider.current.prev();\n                }}\n                title=\"Add Election Candidates\"\n                // subTitle=\"Add Election Candidates\"\n              />\n              <Form.Item\n                name=\"candidates\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"left\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Space>\n                  <AddressInput\n                    ensProvider={mainnetProvider}\n                    placeholder=\"Enter address\"\n                    value={toAddress}\n                    onChange={setToAddress}\n                  />\n                  <Button\n                    type=\"default\"\n                    size=\"large\"\n                    onClick={() => {\n                      addresses.push(toAddress);\n                      setToAddress(\"\");\n                    }}\n                  >\n                    + Add\n                  </Button>\n                </Space>\n              </Form.Item>\n              <List\n                style={{ overflow: \"auto\", height: \"200px\" }}\n                itemLayout=\"horizontal\"\n                bordered\n                dataSource={addresses}\n                renderItem={(item, index) => (\n                  <List.Item>\n                    <Address address={item} ensProvider={mainnetProvider} fontSize=\"14pt\" />\n                    <Button\n                      type=\"link\"\n                      onClick={async () => {\n                        const updatedAddresses = [...addresses];\n                        updatedAddresses.splice(index, 1);\n                        setAddresses(updatedAddresses);\n                      }}\n                      size=\"medium\"\n                      style={{ marginLeft: \"200px\" }}\n                    >\n                      ❌\n                    </Button>\n                  </List.Item>\n                )}\n              />\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Divider>\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    shape=\"round\"\n                    onClick={() => {\n                      slider.current.next();\n                    }}\n                  >\n                    Continue\n                  </Button>\n                </Divider>\n              </div>\n            </div>\n\n            <div>\n              <PageHeader\n                ghost={false}\n                onBack={() => {\n                  slider.current.prev();\n                }}\n                title=\"Confirm Election Details\"\n                // subTitle=\"Review Election Details\"\n              />\n\n              <Descriptions title=\"Election Details\" column={1} size=\"small\" bordered>\n                <Descriptions.Item label=\"Name\">{newElecName}</Descriptions.Item>\n                <Descriptions.Item label=\"Allocated Funds (wei)\">{newElecAllocatedFunds}</Descriptions.Item>\n                <Descriptions.Item label=\"Votes/Candidate\">{newElecAllocatedVotes}</Descriptions.Item>\n                <Descriptions.Item label=\"Candidates\">\n                  <ul>\n                    {addresses.map(adr => {\n                      return (\n                        <li>\n                          <Address address={adr} fontSize=\"14pt\" />{\" \"}\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </Descriptions.Item>\n              </Descriptions>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Divider>\n                  {!isCreating && (\n                    <Button type=\"primary\" size=\"large\" shape=\"round\" htmlType=\"submit\" className=\"login-form-button\">\n                      Confirm Election\n                    </Button>\n                  )}\n                  {isCreating && (\n                    <Button type=\"primary\" size=\"large\" shape=\"round\" loading>\n                      Creating\n                    </Button>\n                  )}\n                </Divider>\n              </div>\n            </div>\n          </Carousel>\n        </Form>\n      </Modal>\n\n      <div\n        className=\"elections-view\"\n        style={{ border: \"1px solid #cccccc\", padding: 16, width: 1000, margin: \"auto\", marginTop: 64 }}\n      >\n        <PageHeader\n          ghost={false}\n          title=\"Elections\"\n          subTitle={`Count: ${numElections}`}\n          extra={[\n            <Button type=\"primary\" size=\"large\" shape=\"round\" style={{ margin: 4 }} onClick={() => createNewElection()}>\n              + Create Election\n            </Button>,\n          ]}\n        />\n        <Divider />\n        <Table {...table_state} dataSource={tableDataSrc} columns={columns} pagination={{ pageSize: 5 }} />\n      </div>\n    </>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport { useParams } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Card,\n  DatePicker,\n  Divider,\n  Input,\n  List,\n  Typography,\n  Progress,\n  Slider,\n  Spin,\n  Switch,\n  Table,\n  Modal,\n  Form,\n  Checkbox,\n  Select,\n  Space,\n} from \"antd\";\nimport { useEventListener, useOnBlock } from \"../hooks\";\nimport { fromWei, toWei, toBN } from \"web3-utils\";\nimport { BigNumber } from \"ethers\";\nimport { CodeSandboxSquareFilled } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\n\nexport default function Voting({\n  address,\n  mainnetProvider,\n  blockExplorer,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  let { id } = useParams();\n  const [tableDataSrc, setTableDataSrc] = useState([]);\n  const [elecName, setElecName] = useState(\"\");\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [totalFunds, setTotalFunds] = useState(0);\n  const [remainTokens, setRemainTokens] = useState(0);\n  const [alreadyVoted, setAlreadyVoted] = useState(false);\n  const [canEndElection, setCanEndElection] = useState(false);\n  const [canVoteElection, setCanVoteElection] = useState(false);\n  const [isElectionActive, setIsElectionActive] = useState(false);\n  const [isElecPayoutComplete, setIsElecPayoutComplete] = useState(false);\n  const [isVoting, setIsVoting] = useState(false);\n\n  const [electionWeisToPay, setElectionWeisToPay] = useState([]);\n  const [electionAddressesToPay, setElectionAddressesToPay] = useState([]);\n\n  const voting_columns = [\n    // {\n    //   title: \"Name\",\n    //   dataIndex: \"name\",\n    //   key: \"created_date\",\n    // },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render: address => (\n        <Address address={address} fontSize=\"14pt\" ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ),\n    },\n    {\n      title: \"# Votes\",\n      dataIndex: \"n_votes\",\n      key: \"n_votes\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text, record, index) => (\n        <>\n          <Space size=\"middle\">\n            <Button type=\"default\" size=\"small\" onClick={() => plusVote(index)}>\n              ➕\n            </Button>\n            <Button type=\"default\" size=\"small\" onClick={() => minusVote(index)}>\n              ➖\n            </Button>\n          </Space>\n        </>\n      ),\n    },\n  ];\n\n  const voted_columns = [\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render: address => (\n        <Address address={address} fontSize=\"14pt\" ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ),\n    },\n    {\n      title: \"Current Score\",\n      dataIndex: \"score\",\n      key: \"score\",\n    },\n    {\n      title: \"Payout Distribution\",\n      dataIndex: \"payout\",\n      key: \"payout\",\n      render: payout => {\n        let ethToPay = fromWei(payout.toString(), \"ether\");\n        ethToPay = parseFloat(ethToPay).toFixed(3);\n        return <>{ethToPay} ETH</>;\n      },\n    },\n  ];\n\n  function minusVote(idx) {\n    if (tableDataSrc[idx].n_votes > 0) {\n      tableDataSrc[idx].n_votes = tableDataSrc[idx].n_votes - 1;\n      setRemainTokens(remainTokens + 1);\n    }\n  }\n\n  function plusVote(idx) {\n    if (remainTokens > 0) {\n      tableDataSrc[idx].n_votes = tableDataSrc[idx].n_votes + 1;\n      setRemainTokens(remainTokens - 1);\n    }\n  }\n\n  useEffect(() => {\n    if (readContracts) {\n      if (readContracts.Diplomacy) {\n        init();\n      }\n    }\n  }, [readContracts]);\n\n  const init = async () => {\n    console.log(\"init\");\n    updateView();\n    let contractName = \"Diplomacy\";\n    addEventListener(contractName, \"BallotCast\", onBallotCast);\n    addEventListener(contractName, \"ElectionEnded\", onElectionEnded);\n    addEventListener(contractName, \"ElectionPaid\", onElectionPaid);\n    // console.log(\"added event listeners\");\n  };\n\n  const addEventListener = async (contractName, eventName, callback) => {\n    await readContracts[contractName].removeListener(eventName);\n    readContracts[contractName].on(eventName, (...args) => {\n      let eventBlockNum = args[args.length - 1].blockNumber;\n      if (eventBlockNum >= localProvider._lastBlockNumber) {\n        let msg = args.pop().args;\n        callback(msg);\n      }\n    });\n  };\n\n  function onBallotCast(msg) {\n    console.log(\"onBallotCast \");\n    if (alreadyVoted || msg.voter == address) {\n      updateView();\n      setIsVoting(false);\n    }\n  }\n\n  function onElectionEnded(msg) {\n    console.log(\"onElectionEnded\");\n    updateView();\n  }\n\n  function onElectionPaid(msg) {\n    console.log(\"onElectionPaid\");\n    updateView();\n  }\n\n  const updateView = async () => {\n    const election = await readContracts.Diplomacy.getElectionById(id);\n    const isCreator = election.admin == address;\n    const electionCandidates = election.candidates;\n    const isCandidate = electionCandidates.includes(address);\n    setCanVoteElection(isCandidate);\n    setCanEndElection(isCreator);\n    setIsElectionActive(election.isActive);\n    setIsElecPayoutComplete(election.paid);\n    const funds = election.funds;\n    const ethFund = fromWei(funds.toString(), \"ether\");\n    setTotalFunds(ethFund);\n    setElecName(election.name);\n    // console.log(\"setTotalVotes \", election.votes.toNumber());\n    setTotalVotes(election.votes.toNumber());\n    const hasVoted = await readContracts.Diplomacy.hasVoted(id, address);\n    setAlreadyVoted(hasVoted);\n    if (!hasVoted) {\n      setRemainTokens(election.votes.toNumber());\n    }\n\n    // console.log(\"electionCandidates \", electionCandidates);\n    let data = [];\n\n    for (let i = 0; i < electionCandidates.length; i++) {\n      const addr = electionCandidates[i];\n      const scores = await readContracts.Diplomacy.getElectionScores(id, addr);\n      let scoresSum =\n        scores.length > 0\n          ? scores\n              .map(Number)\n              .reduce((a, b) => {\n                return a + b;\n              })\n              .toFixed(4)\n          : \"0\";\n      let weiToPay = 0;\n      data.push({ key: i, address: addr, n_votes: 0, score: scoresSum, payout: weiToPay });\n    }\n\n    let payoutInfo = await calculatePayout();\n    payoutInfo.payout.forEach((p, i) => {\n      data[i].payout = p;\n    });\n\n    console.log(\"updateView called\");\n    setTableDataSrc(data);\n  };\n\n  const castVotes = async () => {\n    console.log(\"castVotes\");\n    setIsVoting(true);\n    const election = await readContracts.Diplomacy.getElectionById(id);\n    const adrs = election.candidates; // hmm...\n    const votes = [];\n    for (let i = 0; i < tableDataSrc.length; i++) {\n      votes.push(Math.sqrt(tableDataSrc[i].n_votes).toString());\n    }\n\n    const result = tx(writeContracts.Diplomacy.castBallot(id, adrs, votes), update => {\n      console.log(\"📡 Transaction Update:\", update);\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n      } else {\n        console.log(\"update error \", update.status);\n        setIsVoting(false);\n      }\n    });\n    console.log(\"awaiting metamask/web3 confirm result...\", result);\n    console.log(await result);\n    // updateView();\n  };\n\n  //////\n  const [payoutInfo, setPayoutInfo] = useState({ candidates: null, payout: null });\n\n  const calculatePayout = async () => {\n    const election = await readContracts.Diplomacy.getElectionById(id);\n\n    // console.log({election})\n\n    const electionFundsEth = Number(fromWei(election.funds.toString(), \"ether\"));\n    // console.log({electionFundsEth})\n\n    let electionScoresSum = 0;\n\n    let candidates = [];\n    let sqrdSumScore = [];\n    let payoutRatio = [];\n    let ethToPay = [];\n\n    for (let i = 0; i < election.candidates.length; i++) {\n      let candidate = election.candidates[i];\n      // console.log({candidate});\n\n      let candidateScores = await readContracts.Diplomacy.getElectionScores(id, candidate);\n      // console.log({candidateScores});\n\n      let candidateSqrdSumScore = Math.pow(\n        candidateScores.map(Number).reduce((x, y) => {\n          return x + y;\n        }, 0),\n        2,\n      );\n      // console.log({candidateSqrdSumScore});\n\n      electionScoresSum += candidateSqrdSumScore;\n\n      candidates.push(candidate);\n      sqrdSumScore.push(candidateSqrdSumScore);\n    }\n\n    payoutRatio = sqrdSumScore.map(d => {\n      if (electionScoresSum == 0) {\n        return 0;\n      }\n      return d / electionScoresSum; // Should election score sum be squared as well?\n    });\n    // console.log({ payoutRatio });\n\n    // NOTE: Borked: Payout is rounding in a funky way, breaking the validator contract-side\n    ethToPay = payoutRatio.map(d => {\n      return electionFundsEth * d;\n    });\n    console.log({ ethToPay });\n\n    payoutInfo.candidates = candidates;\n    payoutInfo.payout = ethToPay.map(String).map(d => {\n      let d_num = Number(d);\n      d_num = d_num.toFixed(10);\n      return toWei(d_num);\n    }, 0);\n\n    // setPayoutInfo(candidatesPayoutInfo);\n    // console.log({ payoutInfo });\n    return payoutInfo;\n  };\n\n  const endElection = async () => {\n    calculatePayout();\n    console.log(\"endElection\");\n    const result = tx(writeContracts.Diplomacy.endElection(id), update => {\n      console.log(\"📡 Transaction Update:\", update);\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n      }\n    });\n    console.log(\"awaiting metamask/web3 confirm result...\", result);\n  };\n\n  const payoutTokens = async () => {\n    console.log(\"payoutTokens\");\n    console.log({ payoutInfo });\n    const election = await readContracts.Diplomacy.getElectionById(id);\n    console.log({election})\n    if ( election.fundingType === \"ETH\" ) {\n      tx(\n        writeContracts.Diplomacy.payoutElection(id, payoutInfo.candidates, payoutInfo.payout, {\n          value: election.funds,\n          gasLimit: 12450000,\n        }),\n      );\n    } \n    if ( election.fundingType === \"GTC\" ) {\n      tx(\n        writeContracts.Diplomacy.payoutElection(id, payoutInfo.candidates, payoutInfo.payout, {\n          gasLimit: 12450000,\n        }),\n      );\n\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"voting-view\"\n        style={{ border: \"1px solid #cccccc\", padding: 16, width: 900, margin: \"auto\", marginTop: 64 }}\n      >\n        <PageHeader\n          ghost={false}\n          onBack={() => window.history.back()}\n          title={elecName}\n          extra={[\n            canEndElection && isElectionActive && (\n              <Button type=\"danger\" size=\"large\" style={{ margin: 4 }} onClick={() => endElection()}>\n                End\n              </Button>\n            ),\n            canEndElection && !isElectionActive && !isElecPayoutComplete && (\n              <Button type=\"danger\" size=\"large\" style={{ margin: 4 }} onClick={() => payoutTokens()}>\n                💸 Payout\n              </Button>\n            ),\n            isElectionActive && !alreadyVoted && (\n              <Button type=\"primary\" size=\"large\" style={{ margin: 4 }} onClick={() => castVotes()} loading={isVoting}>\n                🗳️ Vote\n              </Button>\n            ),\n          ]}\n        >\n          <h2>Election: {elecName}</h2>\n          <Space split={<Divider type=\"vertical\" />}>\n            <h3>Total funds to distribute: {totalFunds} ETH</h3>\n            <h3>Votes remaining: {remainTokens}</h3>\n            <h3>\n              Status: {isElectionActive && <span>Active</span>}\n              {!isElectionActive && <span>Inactive</span>}\n            </h3>\n          </Space>\n          <Divider />\n          {isElectionActive && canVoteElection && !alreadyVoted && (\n            <Table dataSource={tableDataSrc} columns={voting_columns} pagination={{ pageSize: 5 }} />\n          )}\n          {(!canVoteElection || alreadyVoted || !isElectionActive) && (\n            <Table dataSource={tableDataSrc} columns={voted_columns} pagination={{ pageSize: 5 }} />\n          )}\n          <Divider />\n          {/* {isElectionActive && !alreadyVoted && (\n            <Button type=\"primary\" size=\"large\" style={{ margin: 4 }} onClick={() => castVotes()}>\n              Vote\n            </Button>\n          )} */}\n          {alreadyVoted && <h3>Votes Received! Thanks!</h3>}\n          {/* <Divider />\n          {canEndElection && isElectionActive && (\n            <Button type=\"danger\" size=\"large\" style={{ margin: 4 }} onClick={() => endElection()}>\n              End\n            </Button>\n          )}\n          {canEndElection && !isElectionActive && (\n            <Button type=\"danger\" size=\"large\" style={{ margin: 4 }} onClick={() => payoutTokens()}>\n              Payout\n            </Button>\n          )} */}\n        </PageHeader>\n      </div>\n    </>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"../hooks\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserSigner,\n} from \"./hooks\";\n// import Hints from \"./Hints\";\nimport { Voting, Elections, Hints, Subgraph } from \"./views\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\n// const targetNetwork = NETWORKS.kovan; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n//const targetNetwork = NETWORKS.localhost;\nconst targetNetwork = NETWORKS.rinkeby;\n\n// 😬 Sorry for all the console logging\nconst DEBUG = false;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nexport const blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    /*torus: {\n      package: Torus,\n    },*/\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n  },\n});\n\nfunction App(props) {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  //   useOnBlock(mainnetProvider, () => {\n  //     console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  //   });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              Diplomacy Contract\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/elections\">\n            <Link\n              onClick={() => {\n                setRoute(\"/elections\");\n              }}\n              to=\"/elections\"\n            >\n              Elections\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n            <Contract\n              name=\"Diplomacy\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n          <Route path=\"/voting/:id\">\n            <Voting\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n            />\n          </Route>\n          <Route path=\"/elections\">\n            <Elections\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n            />\n          </Route>\n          {/* <Route path=\"/create\">\n            <CreateElection\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n            />\n          </Route> */}\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}