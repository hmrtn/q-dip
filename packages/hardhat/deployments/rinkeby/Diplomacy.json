{
  "address": "0x6937AB15925C5269Ac237b046F66D072e0e50127",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "scores",
          "type": "string[]"
        }
      ],
      "name": "BallotCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "ElectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "ElectionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "ElectionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_adrs",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_scores",
          "type": "string[]"
        }
      ],
      "name": "castBallot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "elections",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "endElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "getElectionById",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "candidates",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "n_addr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "getElectionResults",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "getElectionScores",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "name": "getElectionVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isElectionAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isElectionCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_funds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_votes",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_adrs",
          "type": "address[]"
        }
      ],
      "name": "newElection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numElections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_adrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pay",
          "type": "uint256[]"
        }
      ],
      "name": "payoutElection",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bf6ea2e3a80b75301052ae8f9a4021885e3a4a9146bdabdacf097af15235cab",
  "receipt": {
    "to": null,
    "from": "0x9135BF69Cdb31B03146DDb4205C73d08800B6a54",
    "contractAddress": "0x6937AB15925C5269Ac237b046F66D072e0e50127",
    "transactionIndex": 12,
    "gasUsed": "2250485",
    "logsBloom": "0x
    "blockHash": "0x8169ae9e376fcf9c01cb3109e3c41addd717a904d9bd58d7dd539896c08233a0",
    "transactionHash": "0x7bf6ea2e3a80b75301052ae8f9a4021885e3a4a9146bdabdacf097af15235cab",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 9208299,
        "transactionHash": "0x7bf6ea2e3a80b75301052ae8f9a4021885e3a4a9146bdabdacf097af15235cab",
        "address": "0x6937AB15925C5269Ac237b046F66D072e0e50127",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009135bf69cdb31b03146ddb4205c73d08800b6a54"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x8169ae9e376fcf9c01cb3109e3c41addd717a904d9bd58d7dd539896c08233a0"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 9208299,
        "transactionHash": "0x7bf6ea2e3a80b75301052ae8f9a4021885e3a4a9146bdabdacf097af15235cab",
        "address": "0x6937AB15925C5269Ac237b046F66D072e0e50127",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009135bf69cdb31b03146ddb4205c73d08800b6a54",
          "0x0000000000000000000000009135bf69cdb31b03146ddb4205c73d08800b6a54"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x8169ae9e376fcf9c01cb3109e3c41addd717a904d9bd58d7dd539896c08233a0"
      }
    ],
    "blockNumber": 9208299,
    "cumulativeGasUsed": "3825470",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c57f40ff059696d2ed1f75038ee93eea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"scores\",\"type\":\"string[]\"}],\"name\":\"BallotCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"ElectionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"ElectionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_adrs\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_scores\",\"type\":\"string[]\"}],\"name\":\"castBallot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"endElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"candidates\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"n_addr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getElectionResults\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getElectionScores\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isElectionAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isElectionCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_funds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_adrs\",\"type\":\"address[]\"}],\"name\":\"newElection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numElections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_adrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pay\",\"type\":\"uint256[]\"}],\"name\":\"payoutElection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveToken(uint256)\":{\"notice\":\"User Approve selected token for the Funding Amount\"},\"castBallot(uint256,address[],string[])\":{\"notice\":\"Cast a ballot to an election\"},\"endElection(uint256)\":{\"notice\":\"End an Active Election\"},\"getElectionById(uint256)\":{\"notice\":\"Get election metadata by the ID  \"},\"newElection(string,uint256,address,uint256,address[])\":{\"notice\":\"Create a new election  \"},\"payoutElection(uint256,address[],uint256[])\":{\"notice\":\"Payout the election\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diplomacy.sol\":\"Diplomacy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Diplomacy.sol\":{\"content\":\"/**                                                                              \\n                                            ..                                  \\n                                          ,*.                                   \\n                                        .**,                                    \\n                                       ,***.                                    \\n                                 .,.   ,***,                                    \\n                               .**,    *****.                                   \\n                             .****.    ,*****,                                  \\n                           .******,     ,******,                                \\n                         .*******.       .********,              .              \\n                       ,******.            .*************,,*****.               \\n                     ,*****.        ,,.        ,************,.                  \\n                  .,****.         ,*****,                                       \\n                 ,***,          ,*******,.              ..                      \\n               ,**,          .*******,.       ,********.                        \\n                           .******,.       .********,                           \\n                         .*****,         .*******,                              \\n                       ,****,          .******,                                 \\n                     ,***,.          .*****,                                    \\n                   ,**,.           ./***,                                       \\n                  ,,             .***,                                          \\n                               .**,                                 \\n            __  _______  ____  _   _______ __  ______  ______         \\n           /  |/  / __ \\\\/ __ \\\\/ | / / ___// / / / __ \\\\/_  __/         \\n          / /|_/ / / / / / / /  |/ /\\\\__ \\\\/ /_/ / / / / / /            \\n         / /  / / /_/ / /_/ / /|  /___/ / __  / /_/ / / /             \\n        /_/  /_/\\\\____/\\\\____/_/_|_//____/_/_/_/\\\\____/_/_/__    ________\\n          / ____/ __ \\\\/ /   / /   / ____/ ____/_  __/  _/ |  / / ____/\\n         / /   / / / / /   / /   / __/ / /     / /  / / | | / / __/   \\n        / /___/ /_/ / /___/ /___/ /___/ /___  / / _/ /  | |/ / /___   \\n        \\\\____/\\\\____/_____/_____/_____/\\\\____/ /_/ /___/  |___/_____/                                                           \\n*/\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Diplomacy is AccessControl, Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n    @notice Election Definition \\n    */\\n    struct Election {\\n        string name;                            // Creator title/names/etc\\n        bool active;                            // Election status\\n        bool paid;                              // Election payout status\\n        uint256 createdAt;                      // Creation block time-stamp\\n        address[] candidates;                   // Candidates (who can vote/be voted)\\n        uint256 funds;                          // Allowance of ETH or Tokens for Election\\n        address token;                          // Address of Election Token (Eth -> 0x00..)\\n        uint256 votes;                          // Number of votes delegated to each candidate\\n        address admin;                          // Address of Election Admin\\n        mapping(address => bool) voted;         // Voter status\\n        mapping(address => string[]) scores;    // string of sqrt votes\\n        mapping(address => int256) results;     // Voter to closed-election result \\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    event BallotCast(address voter, uint256 electionId, address[] adrs, string[] scores);\\n    event ElectionCreated(address creator, uint256 electionId);\\n    event ElectionEnded(uint256 electionId);\\n    event ElectionPaid(uint256 electionId);\\n\\n    bytes32 internal constant ELECTION_ADMIN_ROLE =\\n        keccak256(\\\"ELECTION_ADMIN_ROLE\\\");\\n    bytes32 internal constant ELECTION_CANDIDATE_ROLE =\\n        keccak256(\\\"ELECTION_CANDIDATE_ROLE\\\");\\n\\n    modifier onlyContractAdmin() {\\n\\n        require( hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Sender not Contract Admin!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier onlyElectionCandidate(uint256 electionId) {\\n\\n        require( hasRole(ELECTION_CANDIDATE_ROLE, msg.sender), \\\"Sender not Election Candidate!\\\" );\\n        require( isElectionCandidate(electionId, msg.sender), \\\"Sender not Election Candidate!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier onlyElectionAdmin(uint256 electionId) {\\n\\n        require( hasRole(ELECTION_ADMIN_ROLE, msg.sender), \\\"Sender not Election Admin!\\\" );\\n        require( msg.sender == elections[electionId].admin, \\\"Sender not Election Admin!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier validBallot(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        string[] memory _scores\\n    ) {\\n\\n        require( elections[electionId].active, \\\"Election Not Active!\\\" );\\n        require( !elections[electionId].voted[msg.sender], \\\"Sender already voted!\\\" );\\n        require ( _scores.length == _adrs.length, \\\"Scores - Address Mismatch!\\\" );\\n        //require ( _scores.length == elections[electionId].votes, \\\"Not enough votes sent!\\\" );\\n        _;\\n\\n    }\\n\\n    uint256 public numElections;\\n    mapping(uint256 => Election) public elections;\\n\\n    /**\\n    @notice New Ethereum Reward Election\\n    */\\n    function _newEthElection(\\n        string memory _name,\\n        uint256 _funds,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) internal returns (uint256 electionId) {\\n        \\n        electionId = numElections++;\\n        Election storage election = elections[electionId];\\n        election.name = _name;\\n        election.funds = _funds;\\n        election.votes = _votes;\\n        election.candidates = _adrs;\\n        election.createdAt = block.timestamp;\\n        election.active = true;\\n        election.admin = msg.sender;\\n\\n    }\\n\\n    /**\\n    @notice New Token Reward Election\\n    */\\n    function _newTokenElection(\\n        string memory _name,\\n        uint256 _funds,\\n        address _token,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) internal returns (uint256 electionId) {\\n\\n        electionId = numElections++;\\n        Election storage election = elections[electionId];\\n        election.name = _name;\\n        election.funds = _funds;\\n        election.token = _token;\\n        election.votes = _votes;\\n        election.candidates = _adrs;\\n        election.createdAt = block.timestamp;\\n        election.active = true;\\n        election.admin = msg.sender;\\n\\n    }\\n\\n   /**\\n    @notice Create a new election  \\n    */\\n    function newElection(\\n        string memory _name,\\n        uint256 _funds,\\n        address _token,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) public returns (uint256 electionId) {\\n\\n        if ( _token == address(0) ) { // 0x00.. --> Eth Election\\n            electionId = _newEthElection(_name, _funds, _votes, _adrs);\\n        } else { // Token Election\\n            electionId = _newTokenElection(_name, _funds, _token, _votes, _adrs);\\n        }\\n        // Setup roles\\n        setElectionCandidateRoles(_adrs);\\n        setElectionAdminRole(msg.sender);\\n        emit ElectionCreated(msg.sender, electionId);\\n\\n    }\\n\\n    /**\\n    @notice Cast a ballot to an election\\n    */\\n    function castBallot(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        string[] memory _scores // submitted sqrt of votes\\n    ) public onlyElectionCandidate(electionId) \\n        validBallot(electionId, _adrs, _scores) {\\n\\n        Election storage election = elections[electionId];\\n        for (uint256 i = 0; i < _adrs.length; i++) {\\n            election.scores[_adrs[i]].push(_scores[i]); \\n        }\\n        election.voted[msg.sender] = true;\\n        emit BallotCast(msg.sender, electionId, _adrs, _scores);\\n\\n    }\\n\\n    /**\\n    @notice End an Active Election\\n    */\\n    function endElection(uint256 electionId) \\n    public onlyElectionAdmin(electionId) {\\n\\n        Election storage election = elections[electionId];\\n        require( election.active, \\\"Election Already Ended!\\\" );\\n        election.active = false;\\n        emit ElectionEnded(electionId);\\n\\n    }\\n\\n    /**\\n    @notice Payout the election with ETH \\n    */\\n    function _ethPayout(\\n        uint256 electionId, \\n        address[] memory _adrs, \\n        uint256[] memory _pay\\n    ) internal onlyElectionAdmin(electionId) returns(bool) {\\n\\n        uint256 paySum;\\n        bool status;\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            require( elections[electionId].candidates[i] == _adrs[i], \\\"Election-Address Mismatch!\\\" );\\n            paySum += _pay[i];\\n        }\\n        for (uint256 i = 0; i < _pay.length; i++) {\\n            // NOTE: send instead of transfer to avoid failure throws ?  \\n            status = payable(_adrs[i]).send(_pay[i] * 1 wei);\\n        }\\n        return status; \\n\\n    }\\n\\n    /**\\n    @notice Payout the election with the selected token  \\n    */\\n    function _tokenPayout(\\n        uint256 electionId, \\n        address[] memory _adrs, \\n        uint256[] memory _pay\\n    ) internal returns(bool) {\\n\\n        // Should an allowance be kept? \\n        // Transfer token to contract\\n        IERC20(elections[electionId].token).transferFrom(msg.sender, address(this), elections[electionId].funds);\\n        // Distribute tokens to each candidate\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            ERC20(elections[electionId].token).transfer(_adrs[i], _pay[i]);\\n        }\\n        return true;\\n\\n    }\\n\\n    /**\\n    @notice User Approve selected token for the Funding Amount\\n    */\\n    function approveToken(uint256 electionId) public {\\n        IERC20(elections[electionId].token).approve(address(this), elections[electionId].funds);\\n    }\\n\\n    /**\\n    @notice Payout the election\\n    */\\n    function payoutElection(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        uint256[] memory _pay\\n    ) public payable onlyElectionAdmin(electionId) {\\n\\n        require( !elections[electionId].active, \\\"Election Still Active!\\\" );\\n        bool status;\\n        if ( elections[electionId].token == address(0) ) {\\n            status = _ethPayout(electionId, _adrs, _pay);\\n        } else {\\n            status = _tokenPayout(electionId, _adrs, _pay);\\n        }\\n\\t\\telections[electionId].paid = status;\\n        emit ElectionPaid(electionId);\\n\\n    }\\n\\n    // Setters\\n    function setElectionCandidateRoles(address[] memory _adrs) internal {\\n\\n        for (uint256 i = 0; i < _adrs.length; i++) {\\n            _setupRole(ELECTION_CANDIDATE_ROLE, _adrs[i]);\\n        }\\n\\n    }\\n\\n    function setElectionAdminRole(address adr) internal {\\n        _setupRole(ELECTION_ADMIN_ROLE, adr);\\n    }\\n\\n    /**\\n    @notice Get election metadata by the ID  \\n    */ \\n    function getElectionById(uint256 electionId)\\n    public view \\n    returns (\\n        string memory name,\\n        address[] memory candidates,\\n        uint256 n_addr,\\n        uint256 createdAt,\\n        uint256 funds,\\n        address token,\\n        uint256 votes,\\n        address admin,\\n        bool isActive,\\n        bool paid\\n    ) {\\n\\n        name = elections[electionId].name;\\n        candidates = elections[electionId].candidates;\\n        n_addr = elections[electionId].candidates.length;\\n        createdAt = elections[electionId].createdAt;\\n        funds = elections[electionId].funds;\\n        token = elections[electionId].token;\\n        votes = elections[electionId].votes;\\n        admin = elections[electionId].admin;\\n        isActive = elections[electionId].active;\\n        paid = elections[electionId].paid;\\n\\n    }\\n\\n    function getElectionScores(uint256 electionId, address _adr) \\n    public view returns (string[] memory) {\\n        return elections[electionId].scores[_adr];\\n    }\\n\\n    function getElectionResults(uint256 electionId, address _adr) \\n    public view returns (int256) {\\n        // require( !(elections[electionId].active), \\\"Active election!\\\" );\\n        return elections[electionId].results[_adr];\\n    }\\n\\n    function getElectionVoted(uint256 electionId) \\n    public view returns (uint256 count) {\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            address candidate = elections[electionId].candidates[i];\\n            if (elections[electionId].voted[candidate]) {\\n                count++;\\n            }\\n        }\\n\\n    }\\n\\n    function canVote(uint256 electionId, address _sender)\\n    public view returns (bool status) { // Redundant w/ isElectionCandidate?\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            address candidate = elections[electionId].candidates[i];\\n            if (_sender == candidate) {\\n                status = true;\\n            }\\n        }\\n\\n    }\\n\\n    function isElectionAdmin(uint256 electionId, address _sender) \\n    public view returns (bool) {\\n        return _sender == elections[electionId].admin;\\n    }\\n\\n    function isElectionCandidate(uint256 electionId, address _sender) \\n    public view returns (bool status) {\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            if (_sender == elections[electionId].candidates[i]) {\\n                status = true;\\n                break;\\n            }\\n        }\\n\\n    }\\n\\n    function hasVoted(uint256 electionId, address _sender) \\n    public view returns (bool) {\\n        return elections[electionId].voted[_sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa2bba493abd2e783efb03f894e3546ff1c84b2107bf5450cabe9e34c0303b669\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000030565b6200002a60003362000082565b62000132565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200008e828262000092565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200008e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6126ce80620001426000396000f3fe6080604052600436106101665760003560e01c80636e38d9bd116100d1578063a217fddf1161008a578063cdb2867b11610064578063cdb2867b146104c2578063d547741f146104e2578063ea3c6cde14610502578063f2fde38b1461052257600080fd5b8063a217fddf14610430578063be70a00914610445578063c6958b121461048c57600080fd5b80636e38d9bd1461035e578063715018a6146103745780638da5cb5b1461038957806391b84f16146103b157806391d14854146103f05780639c98bcbb1461041057600080fd5b80633ac9fc11116101235780633ac9fc111461026057806343859632146102805780634548e52b146102ca5780634b8b477e146102ea57806352e968ad1461030a5780635e6fef011461032a57600080fd5b806301ffc9a71461016b57806308108288146101a05780630ece86d0146101cd578063248a9ca3146101e25780632f2ff15d1461022057806336568abe14610240575b600080fd5b34801561017757600080fd5b5061018b61018636600461201b565b610542565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb3660046120c8565b610579565b60405161019791906123f9565b6101e06101db3660046121b9565b610673565b005b3480156101ee57600080fd5b506102126101fd366004611fd8565b60009081526020819052604090206001015490565b604051908152602001610197565b34801561022c57600080fd5b506101e061023b366004611ff0565b6107e1565b34801561024c57600080fd5b506101e061025b366004611ff0565b61080c565b34801561026c57600080fd5b506101e061027b366004611fd8565b61088a565b34801561028c57600080fd5b5061018b61029b3660046120c8565b60008281526003602090815260408083206001600160a01b038516845260080190915290205460ff1692915050565b3480156102d657600080fd5b506101e06102e53660046120da565b610928565b3480156102f657600080fd5b50610212610305366004612043565b610c38565b34801561031657600080fd5b50610212610325366004611fd8565b610cbf565b34801561033657600080fd5b5061034a610345366004611fd8565b610d73565b604051610197989796959493929190612498565b34801561036a57600080fd5b5061021260025481565b34801561038057600080fd5b506101e0610e50565b34801561039557600080fd5b506001546040516001600160a01b039091168152602001610197565b3480156103bd57600080fd5b5061018b6103cc3660046120c8565b600091825260036020526040909120600701546001600160a01b0390811691161490565b3480156103fc57600080fd5b5061018b61040b366004611ff0565b610eb6565b34801561041c57600080fd5b506101e061042b366004611fd8565b610edf565b34801561043c57600080fd5b50610212600081565b34801561045157600080fd5b506102126104603660046120c8565b60008281526003602090815260408083206001600160a01b0385168452600a0190915290205492915050565b34801561049857600080fd5b506104ac6104a7366004611fd8565b610ff3565b6040516101979a9998979695949392919061241f565b3480156104ce57600080fd5b5061018b6104dd3660046120c8565b61122c565b3480156104ee57600080fd5b506101e06104fd366004611ff0565b6112bc565b34801561050e57600080fd5b5061018b61051d3660046120c8565b6112e2565b34801561052e57600080fd5b506101e061053d366004611f9e565b61136c565b60006001600160e01b03198216637965db0b60e01b148061057357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526003602090815260408083206001600160a01b03851684526009018252808320805482518185028101850190935280835260609492939192909184015b828210156106675783829060005260206000200180546105da906125fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610606906125fc565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050815260200190600101906105bb565b50505050905092915050565b8261068c60008051602061267983398151915233610eb6565b6106b15760405162461bcd60e51b81526004016106a8906124f2565b60405180910390fd5b6000818152600360205260409020600701546001600160a01b031633146106ea5760405162461bcd60e51b81526004016106a8906124f2565b60008481526003602052604090206001015460ff16156107455760405162461bcd60e51b8152602060048201526016602482015275456c656374696f6e205374696c6c204163746976652160501b60448201526064016106a8565b6000848152600360205260408120600501546001600160a01b03166107765761076f858585611437565b9050610784565b610781858585611682565b90505b600085815260036020908152604091829020600101805461ff0019166101008515150217905590518681527fb27761a3b9064636a27795816e4f8a8e5cadd6ac8b1e3a553bd47bf414c2b402910160405180910390a15050505050565b6000828152602081905260409020600101546107fd813361185a565b61080783836118be565b505050565b6001600160a01b038116331461087c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106a8565b6108868282611942565b5050565b600081815260036020526040908190206005810154600491820154925163095ea7b360e01b8152309281019290925260248201929092526001600160a01b039091169063095ea7b390604401602060405180830381600087803b1580156108f057600080fd5b505af1158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190611fb8565b826109537f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def33610eb6565b61099f5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016106a8565b6109a981336112e2565b6109f55760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016106a8565b60008481526003602052604090206001015484908490849060ff16610a535760405162461bcd60e51b8152602060048201526014602482015273456c656374696f6e204e6f74204163746976652160601b60448201526064016106a8565b600083815260036020908152604080832033845260080190915290205460ff1615610ab85760405162461bcd60e51b815260206004820152601560248201527453656e64657220616c726561647920766f7465642160581b60448201526064016106a8565b8151815114610b095760405162461bcd60e51b815260206004820152601a60248201527f53636f726573202d2041646472657373204d69736d617463682100000000000060448201526064016106a8565b6000878152600360205260408120905b8751811015610bd557816009016000898381518110610b4857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020878281518110610b9057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452928290208151610bc29491909101929190910190611db3565b5080610bcd81612631565b915050610b19565b5033600081815260088301602052604090819020805460ff19166001179055517faaf8175507b94c84621088891ecf31ca1c2548c0aeab2f2f21d3459515f9c4ed91610c26918b908b908b906123b5565b60405180910390a15050505050505050565b60006001600160a01b038416610c5b57610c54868685856119a7565b9050610c6b565b610c688686868686611a38565b90505b610c7482611ae7565b610c7d33611b56565b60408051338152602081018390527fc91fe4766a7a928d6625f66818425dc115b03c854a8ed8d28de2f34a684e0f1a910160405180910390a195945050505050565b6000805b60008381526003602081905260409091200154811015610d6d576000838152600360208190526040822001805483908110610d0e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548683526003825260408084206001600160a01b03909216808552600890920190925291205490915060ff1615610d5a5782610d5681612631565b9350505b5080610d6581612631565b915050610cc3565b50919050565b600360205260009081526040902080548190610d8e906125fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610dba906125fc565b8015610e075780601f10610ddc57610100808354040283529160200191610e07565b820191906000526020600020905b815481529060010190602001808311610dea57829003601f168201915b50505060018401546002850154600486015460058701546006880154600790980154969760ff8086169861010090960416965092945090926001600160a01b0391821692911688565b6001546001600160a01b03163314610eaa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a8565b610eb46000611b6e565b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b80610ef860008051602061267983398151915233610eb6565b610f145760405162461bcd60e51b81526004016106a8906124f2565b6000818152600360205260409020600701546001600160a01b03163314610f4d5760405162461bcd60e51b81526004016106a8906124f2565b6000828152600360205260409020600181015460ff16610faf5760405162461bcd60e51b815260206004820152601760248201527f456c656374696f6e20416c726561647920456e6465642100000000000000000060448201526064016106a8565b60018101805460ff191690556040518381527f562cd572b2ba3b666cd989fc4ca98419ec81e75f04528df9d9d76fdb7807ee719060200160405180910390a1505050565b606080600080600080600080600080600360008c81526020019081526020016000206000018054611023906125fc565b80601f016020809104026020016040519081016040528092919081815260200182805461104f906125fc565b801561109c5780601f106110715761010080835404028352916020019161109c565b820191906000526020600020905b81548152906001019060200180831161107f57829003601f168201915b50505050509950600360008c815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561110d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110ef575b50505050509850600360008c8152602001908152602001600020600301805490509750600360008c8152602001908152602001600020600201549650600360008c8152602001908152602001600020600401549550600360008c815260200190815260200160002060050160009054906101000a90046001600160a01b03169450600360008c8152602001908152602001600020600601549350600360008c815260200190815260200160002060070160009054906101000a90046001600160a01b03169250600360008c815260200190815260200160002060010160009054906101000a900460ff169150600360008c815260200190815260200160002060010160019054906101000a900460ff1690509193959799509193959799565b6000805b600084815260036020819052604090912001548110156112b557600084815260036020819052604082200180548390811061127b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03908116915084168114156112a257600192505b50806112ad81612631565b915050611230565b5092915050565b6000828152602081905260409020600101546112d8813361185a565b6108078383611942565b6000805b600084815260036020819052604090912001548110156112b55760008481526003602081905260409091200180548290811061133257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038481169116141561135a57600191506112b5565b8061136481612631565b9150506112e6565b6001546001600160a01b031633146113c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a8565b6001600160a01b03811661142b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a8565b61143481611b6e565b50565b60008361145260008051602061267983398151915233610eb6565b61146e5760405162461bcd60e51b81526004016106a8906124f2565b6000818152600360205260409020600701546001600160a01b031633146114a75760405162461bcd60e51b81526004016106a8906124f2565b60008060005b600088815260036020819052604090912001548110156115d6578681815181106114e757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316600360008a8152602001908152602001600020600301828154811061152d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161461158f5760405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2d41646472657373204d69736d617463682100000000000060448201526064016106a8565b8581815181106115af57634e487b7160e01b600052603260045260246000fd5b6020026020010151836115c2919061257e565b9250806115ce81612631565b9150506114ad565b5060005b85518110156116775786818151811061160357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166108fc87838151811061163757634e487b7160e01b600052603260045260246000fd5b6020026020010151600161164b9190612596565b6040518115909202916000818181858888f193505050509150808061166f90612631565b9150506115da565b509695505050505050565b600083815260036020526040808220600581015460049182015492516323b872dd60e01b8152339281019290925230602483015260448201929092526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190611fb8565b5060005b6000858152600360208190526040909120015481101561184f5760008581526003602052604090206005015484516001600160a01b039091169063a9059cbb9086908490811061178957634e487b7160e01b600052603260045260246000fd5b60200260200101518584815181106117b157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016117ea9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190611fb8565b508061184781612631565b915050611729565b506001949350505050565b6118648282610eb6565b6108865761187c816001600160a01b03166014611bc0565b611887836020611bc0565b604051602001611898929190612340565b60408051601f198184030181529082905262461bcd60e51b82526106a89160040161240c565b6118c88282610eb6565b610886576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61194c8282610eb6565b15610886576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60028054600091826119b883612631565b9091555060008181526003602090815260409091208751929350916119e291839190890190611db3565b5060048101859055600681018490558251611a069060038301906020860190611e37565b504260028201556001808201805460ff1916909117905560070180546001600160a01b03191633179055949350505050565b6002805460009182611a4983612631565b909155506000818152600360209081526040909120885192935091611a73918391908a0190611db3565b50600481018690556005810180546001600160a01b0319166001600160a01b038716179055600681018490558251611ab49060038301906020860190611e37565b504260028201556001808201805460ff1916909117905560070180546001600160a01b0319163317905595945050505050565b60005b815181101561088657611b447f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def838381518110611b3757634e487b7160e01b600052603260045260246000fd5b6020026020010151611da9565b80611b4e81612631565b915050611aea565b61143460008051602061267983398151915282611da9565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611bcf836002612596565b611bda90600261257e565b67ffffffffffffffff811115611c0057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c2a576020820181803683370190505b509050600360fc1b81600081518110611c5357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c9057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611cb4846002612596565b611cbf90600161257e565b90505b6001811115611d53576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d0157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611d2557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611d4c816125e5565b9050611cc2565b508315611da25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a8565b9392505050565b61088682826118be565b828054611dbf906125fc565b90600052602060002090601f016020900481019282611de15760008555611e27565b82601f10611dfa57805160ff1916838001178555611e27565b82800160010185558215611e27579182015b82811115611e27578251825591602001919060010190611e0c565b50611e33929150611e8c565b5090565b828054828255906000526020600020908101928215611e27579160200282015b82811115611e2757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611e57565b5b80821115611e335760008155600101611e8d565b80356001600160a01b0381168114611eb857600080fd5b919050565b600082601f830112611ecd578081fd5b81356020611ee2611edd8361255a565b612529565b80838252828201915082860187848660051b8901011115611f01578586fd5b855b85811015611f2657611f1482611ea1565b84529284019290840190600101611f03565b5090979650505050505050565b600082601f830112611f43578081fd5b813567ffffffffffffffff811115611f5d57611f5d612662565b611f70601f8201601f1916602001612529565b818152846020838601011115611f84578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611faf578081fd5b611da282611ea1565b600060208284031215611fc9578081fd5b81518015158114611da2578182fd5b600060208284031215611fe9578081fd5b5035919050565b60008060408385031215612002578081fd5b8235915061201260208401611ea1565b90509250929050565b60006020828403121561202c578081fd5b81356001600160e01b031981168114611da2578182fd5b600080600080600060a0868803121561205a578081fd5b853567ffffffffffffffff80821115612071578283fd5b61207d89838a01611f33565b96506020880135955061209260408901611ea1565b94506060880135935060808801359150808211156120ae578283fd5b506120bb88828901611ebd565b9150509295509295909350565b60008060408385031215612002578182fd5b6000806000606084860312156120ee578283fd5b8335925060208085013567ffffffffffffffff8082111561210d578485fd5b61211988838901611ebd565b9450604087013591508082111561212e578384fd5b818701915087601f830112612141578384fd5b813561214f611edd8261255a565b8082825285820191508585018b878560051b880101111561216e578788fd5b875b848110156121a75781358681111561218657898afd5b6121948e8a838b0101611f33565b8552509287019290870190600101612170565b50508096505050505050509250925092565b6000806000606084860312156121cd578081fd5b8335925060208085013567ffffffffffffffff808211156121ec578384fd5b6121f888838901611ebd565b9450604087013591508082111561220d578384fd5b508501601f8101871361221e578283fd5b803561222c611edd8261255a565b8082825284820191508484018a868560051b870101111561224b578687fd5b8694505b8385101561226d57803583526001949094019391850191850161224f565b5080955050505050509250925092565b6000815180845260208085019450808401835b838110156122b55781516001600160a01b031687529582019590820190600101612290565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b858110156123075782840389526122f5848351612314565b988501989350908401906001016122dd565b5091979650505050505050565b6000815180845261232c8160208601602086016125b5565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123788160178501602088016125b5565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123a98160288401602088016125b5565b01602801949350505050565b60018060a01b03851681528360208201526080604082015260006123dc608083018561227d565b82810360608401526123ee81856122c0565b979650505050505050565b602081526000611da260208301846122c0565b602081526000611da26020830184612314565b60006101408083526124338184018e612314565b90508281036020840152612447818d61227d565b604084019b909b525050606081019790975260808701959095526001600160a01b0393841660a087015260c086019290925290911660e0840152151561010083015215156101209091015292915050565b60006101008083526124ac8184018c612314565b991515602084015250509515156040870152606086019490945260808501929092526001600160a01b0390811660a085015260c08401919091521660e090910152919050565b6020808252601a908201527f53656e646572206e6f7420456c656374696f6e2041646d696e21000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561255257612552612662565b604052919050565b600067ffffffffffffffff82111561257457612574612662565b5060051b60200190565b600082198211156125915761259161264c565b500190565b60008160001904831182151516156125b0576125b061264c565b500290565b60005b838110156125d05781810151838201526020016125b8565b838111156125df576000848401525b50505050565b6000816125f4576125f461264c565b506000190190565b600181811c9082168061261057607f821691505b60208210811415610d6d57634e487b7160e01b600052602260045260246000fd5b60006000198214156126455761264561264c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe16f50c1fe196fa8f2d59c3eca367f2f7bf83b35c12ed36436b26d5af3695f5c4a26469706673582212204187b23ce4071a7b880ca77148a66d0b4a8b65b2301c31c13cef488a3e06cd9164736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveToken(uint256)": {
        "notice": "User Approve selected token for the Funding Amount"
      },
      "castBallot(uint256,address[],string[])": {
        "notice": "Cast a ballot to an election"
      },
      "endElection(uint256)": {
        "notice": "End an Active Election"
      },
      "getElectionById(uint256)": {
        "notice": "Get election metadata by the ID  "
      },
      "newElection(string,uint256,address,uint256,address[])": {
        "notice": "Create a new election  "
      },
      "payoutElection(uint256,address[],uint256[])": {
        "notice": "Payout the election"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Diplomacy.sol:Diplomacy",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 387,
        "contract": "contracts/Diplomacy.sol:Diplomacy",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1905,
        "contract": "contracts/Diplomacy.sol:Diplomacy",
        "label": "numElections",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1910,
        "contract": "contracts/Diplomacy.sol:Diplomacy",
        "label": "elections",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Election)1753_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Election)1753_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Diplomacy.Election)",
        "numberOfBytes": "32",
        "value": "t_struct(Election)1753_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Election)1753_storage": {
        "encoding": "inplace",
        "label": "struct Diplomacy.Election",
        "members": [
          {
            "astId": 1722,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1724,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1726,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "paid",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1728,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1731,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "candidates",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1733,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "funds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1735,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "token",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1737,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "votes",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1739,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "admin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1743,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1748,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "scores",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
          },
          {
            "astId": 1752,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "results",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_int256)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Diplomacy.sol:Diplomacy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}