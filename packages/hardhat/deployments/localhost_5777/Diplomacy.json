{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Diplomacy.sol\":{\"content\":\"/**                                                                              \\n                                            ..                                  \\n                                          ,*.                                   \\n                                        .**,                                    \\n                                       ,***.                                    \\n                                 .,.   ,***,                                    \\n                               .**,    *****.                                   \\n                             .****.    ,*****,                                  \\n                           .******,     ,******,                                \\n                         .*******.       .********,              .              \\n                       ,******.            .*************,,*****.               \\n                     ,*****.        ,,.        ,************,.                  \\n                  .,****.         ,*****,                                       \\n                 ,***,          ,*******,.              ..                      \\n               ,**,          .*******,.       ,********.                        \\n                           .******,.       .********,                           \\n                         .*****,         .*******,                              \\n                       ,****,          .******,                                 \\n                     ,***,.          .*****,                                    \\n                   ,**,.           ./***,                                       \\n                  ,,             .***,                                          \\n                               .**,                                 \\n            __  _______  ____  _   _______ __  ______  ______         \\n           /  |/  / __ \\\\/ __ \\\\/ | / / ___// / / / __ \\\\/_  __/         \\n          / /|_/ / / / / / / /  |/ /\\\\__ \\\\/ /_/ / / / / / /            \\n         / /  / / /_/ / /_/ / /|  /___/ / __  / /_/ / / /             \\n        /_/  /_/\\\\____/\\\\____/_/_|_//____/_/_/_/\\\\____/_/_/__    ________\\n          / ____/ __ \\\\/ /   / /   / ____/ ____/_  __/  _/ |  / / ____/\\n         / /   / / / / /   / /   / __/ / /     / /  / / | | / / __/   \\n        / /___/ /_/ / /___/ /___/ /___/ /___  / / _/ /  | |/ / /___   \\n        \\\\____/\\\\____/_____/_____/_____/\\\\____/ /_/ /___/  |___/_____/                                                           \\n*/\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./EIP712MetaTransaction.sol\\\";\\n\\ncontract Diplomacy is AccessControl, Ownable, ReentrancyGuard, EIP712MetaTransaction(\\\"Diplomacy\\\", \\\"1\\\") {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n    @notice Election Definition\\n    */\\n    struct Election {\\n        string name;                            // Creator title/names/etc\\n        bool active;                            // Election status\\n        bool paid;                              // Election payout status\\n        uint256 createdAt;                      // Creation block time-stamp\\n        address[] candidates;                   // Candidates (who can vote/be voted)\\n        uint256 funds;                          // Allowance of ETH or Tokens for Election\\n        address token;                          // Address of Election Token (Eth -> 0x00..)\\n        uint256 votes;                          // Number of votes delegated to each candidate\\n        address admin;                          // Address of Election Admin\\n    }\\n\\n    mapping(uint256 => mapping(address => bool)) public voted;      // Election-candidate vote status\\n    mapping(uint256 => mapping(address => string[])) public scores; // Election-candidate submitted scores\\n\\n    mapping(uint256 => Election) public elections;\\n\\n    constructor() ReentrancyGuard() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender());\\n    }\\n\\n    event BallotCast(address voter, uint256 electionId, address[] adrs, string[] scores);\\n    event ElectionCreated(address creator, uint256 electionId);\\n    event ElectionEnded(uint256 electionId);\\n    event ElectionPaid(uint256 electionId);\\n\\n    bytes32 internal constant ELECTION_ADMIN_ROLE =\\n        keccak256(\\\"ELECTION_ADMIN_ROLE\\\");\\n    bytes32 internal constant ELECTION_CANDIDATE_ROLE =\\n        keccak256(\\\"ELECTION_CANDIDATE_ROLE\\\");\\n\\n    modifier onlyContractAdmin() {\\n\\n        require( hasRole(DEFAULT_ADMIN_ROLE, msgSender()), \\\"Sender not Contract Admin!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier onlyElectionCandidate(uint256 electionId) {\\n\\n        require( hasRole(ELECTION_CANDIDATE_ROLE, msgSender()), \\\"Sender not Election Candidate!\\\" );\\n        require( isElectionCandidate(electionId, msgSender()), \\\"Sender not Election Candidate!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier onlyElectionAdmin(uint256 electionId) {\\n\\n        require( hasRole(ELECTION_ADMIN_ROLE, msgSender()), \\\"Sender not Election Admin!\\\" );\\n        require( msgSender() == elections[electionId].admin, \\\"Sender not Election Admin!\\\" );\\n        _;\\n\\n    }\\n\\n    modifier validBallot(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        string[] memory _scores\\n    ) {\\n\\n        require( elections[electionId].active, \\\"Election Not Active!\\\" );\\n        require( !voted[electionId][msgSender()], \\\"Sender already voted!\\\" );\\n        require ( _scores.length == _adrs.length, \\\"Scores - Address Mismatch!\\\" );\\n        //require ( _scores.length == elections[electionId].votes, \\\"Not enough votes sent!\\\" );\\n        _;\\n\\n    }\\n\\n    uint256 public numElections;\\n\\n    /**\\n    @notice New Ethereum Reward Election\\n    */\\n    function _newEthElection(\\n        string memory _name,\\n        uint256 _funds,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) internal returns (uint256 electionId) {\\n\\n        electionId = numElections++; // why does .add break it?\\n        Election storage election = elections[electionId];\\n        election.name = _name;\\n        election.funds = _funds;\\n        election.votes = _votes;\\n        election.candidates = _adrs;\\n        election.createdAt = block.timestamp;\\n        election.active = true;\\n        election.admin = msgSender();\\n\\n    }\\n\\n    /**\\n    @notice New Token Reward Election\\n    */\\n    function _newTokenElection(\\n        string memory _name,\\n        uint256 _funds,\\n        address _token,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) internal returns (uint256 electionId) {\\n\\n        electionId = numElections++;\\n        Election storage election = elections[electionId];\\n        election.name = _name;\\n        election.funds = _funds;\\n        election.token = _token;\\n        election.votes = _votes;\\n        election.candidates = _adrs;\\n        election.createdAt = block.timestamp;\\n        election.active = true;\\n        election.admin = msgSender();\\n\\n    }\\n\\n   /**\\n    @notice Create a new election\\n    */\\n    function newElection(\\n        string memory _name,\\n        uint256 _funds,\\n        address _token,\\n        uint256 _votes,\\n        address[] memory _adrs\\n    ) public returns (uint256 electionId) {\\n\\n        if ( _token == address(0) ) { // 0x00.. --> Eth Election\\n            electionId = _newEthElection(_name, _funds, _votes, _adrs);\\n        } else { // Token Election\\n            electionId = _newTokenElection(_name, _funds, _token, _votes, _adrs);\\n        }\\n        // Setup roles\\n        _setElectionCandidateRoles(_adrs);\\n        _setElectionAdminRole(msgSender());\\n        emit ElectionCreated(msgSender(), electionId);\\n\\n    }\\n\\n    /**\\n    @notice Cast a ballot to an election\\n    */\\n    function castBallot(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        string[] memory _scores // submitted sqrt of votes\\n    ) public onlyElectionCandidate(electionId)\\n        validBallot(electionId, _adrs, _scores) {\\n\\n        for (uint256 i = 0; i < _adrs.length; i++) {\\n            scores[electionId][_adrs[i]].push(_scores[i]);\\n        }\\n        voted[electionId][msgSender()] = true;\\n        emit BallotCast(msgSender(), electionId, _adrs, _scores);\\n\\n    }\\n\\n    /**\\n    @notice End an Active Election\\n    */\\n    function endElection(uint256 electionId)\\n    public onlyElectionAdmin(electionId) {\\n\\n        Election storage election = elections[electionId];\\n        require( election.active, \\\"Election Already Ended!\\\" );\\n        election.active = false;\\n        emit ElectionEnded(electionId); // look into diff methods\\n\\n    }\\n\\n    /**\\n    @notice Payout the election with ETH\\n    */\\n    function _ethPayout(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        uint256[] memory _pay\\n    ) internal onlyElectionAdmin(electionId) returns(bool) {\\n\\n        uint256 paySum;\\n        // bool status;\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            require( elections[electionId].candidates[i] == _adrs[i], \\\"Election-Address Mismatch!\\\" );\\n            paySum += _pay[i];\\n        }\\n        for (uint256 i = 0; i < _pay.length; i++) {\\n            // Call returns a boolean value indicating success or failure.\\n            (bool sent, bytes memory data) = _adrs[i].call{value: _pay[i]}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        return true;\\n\\n    }\\n\\n    /**\\n    @notice Payout the election with the selected token\\n    */\\n    function _tokenPayout(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        uint256[] memory _pay\\n    ) internal returns(bool) {\\n\\n        // Distribute tokens to each candidate\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            IERC20(elections[electionId].token).safeTransferFrom(msgSender(), _adrs[i], _pay[i]); // omit\\n        }\\n        return true;\\n\\n    }\\n\\n    /**\\n    @notice User Approve selected token for the Funding Amount\\n    */\\n    function approveToken(uint256 electionId) public {\\n        // Safe approve?\\n        IERC20(elections[electionId].token).approve(address(this), elections[electionId].funds);\\n    }\\n\\n    /**\\n    @notice Payout the election\\n    */\\n    function payoutElection(\\n        uint256 electionId,\\n        address[] memory _adrs,\\n        uint256[] memory _pay\\n    ) public payable onlyElectionAdmin(electionId) nonReentrant() {\\n\\n        require( !elections[electionId].active, \\\"Election Still Active!\\\" );\\n        bool status;\\n        if ( elections[electionId].token == address(0) ) {\\n            status = _ethPayout(electionId, _adrs, _pay);\\n        } else {\\n            status = _tokenPayout(electionId, _adrs, _pay);\\n        }\\n        elections[electionId].paid = status;\\n        emit ElectionPaid(electionId);\\n\\n    }\\n\\n    // Setters\\n    function _setElectionCandidateRoles(address[] memory _adrs) internal {\\n\\n        for (uint256 i = 0; i < _adrs.length; i++) {\\n            _setupRole(ELECTION_CANDIDATE_ROLE, _adrs[i]);\\n        }\\n\\n    }\\n\\n    function _setElectionAdminRole(address adr) internal {\\n        _setupRole(ELECTION_ADMIN_ROLE, adr);\\n    }\\n\\n    /**\\n    @notice Get election metadata by the ID\\n    */\\n    // Use a struct mapping instead!\\n    function getElectionById(uint256 electionId)\\n    public view\\n    returns (\\n        string memory name,\\n        address[] memory candidates,\\n        uint256 n_addr,\\n        uint256 createdAt,\\n        uint256 funds,\\n        address token,\\n        uint256 votes,\\n        address admin,\\n        bool isActive,\\n        bool paid\\n    ) {\\n\\n        name = elections[electionId].name;\\n        candidates = elections[electionId].candidates;\\n        n_addr = elections[electionId].candidates.length;\\n        createdAt = elections[electionId].createdAt;\\n        funds = elections[electionId].funds;\\n        token = elections[electionId].token;\\n        votes = elections[electionId].votes;\\n        admin = elections[electionId].admin;\\n        isActive = elections[electionId].active;\\n        paid = elections[electionId].paid;\\n\\n    }\\n\\n    function getElectionScores(uint256 electionId, address _adr) \\n    public view returns (string[] memory) {\\n        return scores[electionId][_adr];\\n    }\\n\\n    function getElectionVoted(uint256 electionId) \\n    public view returns (uint256 count) {\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            address candidate = elections[electionId].candidates[i];\\n            if (voted[electionId][candidate]) {\\n                count++;\\n            }\\n        }\\n\\n    }\\n\\n    function canVote(uint256 electionId, address _sender)\\n    public view returns (bool status) { // Redundant w/ isElectionCandidate?\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            address candidate = elections[electionId].candidates[i];\\n            if (_sender == candidate) {\\n                status = true;\\n            }\\n        }\\n\\n    }\\n\\n    function isElectionAdmin(uint256 electionId, address _sender) \\n    public view returns (bool) {\\n        return _sender == elections[electionId].admin;\\n    }\\n\\n    function isElectionCandidate(uint256 electionId, address _sender) \\n    public view returns (bool status) {\\n\\n        for (uint256 i = 0; i < elections[electionId].candidates.length; i++) {\\n            if (_sender == elections[electionId].candidates[i]) {\\n                status = true;\\n                break;\\n            }\\n        }\\n\\n    }\\n\\n    function hasVoted(uint256 electionId, address _sender) \\n    public view returns (bool) {\\n        return voted[electionId][_sender];\\n    }\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"contracts/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract EIP712Base {\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n\\n    bytes32 internal domainSeparator;\\n\\n    constructor(string memory name, string memory version) {\\n        domainSeparator = keccak256(abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            address(this),\\n            bytes32(getChainID())\\n        ));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns(bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n    * Accept message hash and returns hash message in EIP712 compatible form\\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n    * https://eips.ethereum.org/EIPS/eip-712\\n    * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n    * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n    */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns(bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n\\n}\\n\"},\"contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EIP712Base.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract EIP712MetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    event BatchMetaTransactionExecuted(address payable relayerAddress, uint256 functionCalls);\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(address userAddress,\\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) public payable returns(bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n        return returnData;\\n    }\\n\\n    function executeBatchMetaTransaction(bytes[] calldata mtx, uint256 size) public payable returns(bool) {\\n        for (uint256 i = 0; i < size; i++) {\\n            (address userAddress, bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) = abi.decode(mtx[i], (address, bytes, bytes32, bytes32, uint8));\\n            executeMetaTransaction(userAddress, functionSignature, sigR, sigS, sigV);\\n        }\\n        emit BatchMetaTransactionExecuted(payable(msg.sender), size);\\n        return true;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            META_TRANSACTION_TYPEHASH,\\n            metaTx.nonce,\\n            metaTx.from,\\n            keccak256(metaTx.functionSignature)\\n        ));\\n    }\\n\\n    function getNonce(address user) external view returns(uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(address user, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function msgSender() internal view returns(address sender) {\\n        if(msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\"}}}","address":"0xd57eC3ED8BB6b16aE3eE039114512bcFD1001ECC","bytecode":"0x60806040523480156200001157600080fd5b50604051806040016040528060098152602001684469706c6f6d61637960b81b815250604051806040016040528060018152602001603160f81b81525081816200006a620000646200011e60201b60201c565b62000122565b60016002556040805160808101909152604f808252620035726020830139805190602001208280519060200120828051906020012030620000b06200017460201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f198184030181529190528051602090910120600355506200011892506000915062000112905062000178565b620001d7565b62000287565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b4690565b600033301415620001d157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620001d49050565b50335b90565b620001e38282620001e7565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001e3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6132db80620002976000396000f3fe6080604052600436106101ae5760003560e01c80635e6fef01116100eb578063a217fddf1161008f578063cdb2867b11610061578063cdb2867b14610587578063d547741f146105a7578063ea3c6cde146105c7578063f2fde38b146105e757005b8063a217fddf14610509578063b082c3851461051e578063c6958b121461053e578063c71bad6e1461057457005b80638da5cb5b116100c85780638da5cb5b1461046057806391b84f161461048857806391d14854146104c95780639c98bcbb146104e957005b80635e6fef01146104015780636e38d9bd14610435578063715018a61461044b57005b806336568abe116101525780634548e52b1161012f5780634548e52b146103665780634b8b477e146103865780635277b4ae146103a657806352e968ad146103e157005b806336568abe146102e05780633ac9fc1114610300578063438596321461032057005b80630ece86d01161018b5780630ece86d014610239578063248a9ca31461024c5780632d0335ab1461028a5780632f2ff15d146102c057005b806301ffc9a7146101b757806308108288146101ec5780630c53c51c1461021957005b366101b557005b005b3480156101c357600080fd5b506101d76101d2366004612ae2565b610607565b60405190151581526020015b60405180910390f35b3480156101f857600080fd5b5061020c610207366004612ab3565b61063e565b6040516101e39190612f66565b61022c610227366004612993565b610735565b6040516101e39190612f79565b6101b5610247366004612ca9565b6109b1565b34801561025857600080fd5b5061027c610267366004612a9b565b60009081526020819052604090206001015490565b6040519081526020016101e3565b34801561029657600080fd5b5061027c6102a5366004612977565b6001600160a01b031660009081526004602052604090205490565b3480156102cc57600080fd5b506101b56102db366004612ab3565b610b84565b3480156102ec57600080fd5b506101b56102fb366004612ab3565b610baf565b34801561030c57600080fd5b506101b561031b366004612a9b565b610c2d565b34801561032c57600080fd5b506101d761033b366004612ab3565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561037257600080fd5b506101b5610381366004612bca565b610ccb565b34801561039257600080fd5b5061027c6103a1366004612b0a565b611021565b3480156103b257600080fd5b506101d76103c1366004612ab3565b600560209081526000928352604080842090915290825290205460ff1681565b3480156103ed57600080fd5b5061027c6103fc366004612a9b565b6110c0565b34801561040d57600080fd5b5061042161041c366004612a9b565b61116f565b6040516101e3989796959493929190613005565b34801561044157600080fd5b5061027c60085481565b34801561045757600080fd5b506101b561124c565b34801561046c57600080fd5b506001546040516001600160a01b0390911681526020016101e3565b34801561049457600080fd5b506101d76104a3366004612ab3565b6000918252600760208190526040909220909101546001600160a01b0390811691161490565b3480156104d557600080fd5b506101d76104e4366004612ab3565b6112b2565b3480156104f557600080fd5b506101b5610504366004612a9b565b6112db565b34801561051557600080fd5b5061027c600081565b34801561052a57600080fd5b5061022c610539366004612b93565b611402565b34801561054a57600080fd5b5061055e610559366004612a9b565b6114c8565b6040516101e39a99989796959493929190612f8c565b6101d7610582366004612a05565b611701565b34801561059357600080fd5b506101d76105a2366004612ab3565b6117c9565b3480156105b357600080fd5b506101b56105c2366004612ab3565b611858565b3480156105d357600080fd5b506101d76105e2366004612ab3565b61187e565b3480156105f357600080fd5b506101b5610602366004612977565b611906565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526006602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b8282101561072957838290600052602060002001805461069c906131b1565b80601f01602080910402602001604051908101604052809291908181526020018280546106c8906131b1565b80156107155780601f106106ea57610100808354040283529160200191610715565b820191906000526020600020905b8154815290600101906020018083116106f857829003601f168201915b50505050508152602001906001019061067d565b50505050905092915050565b60606000610742866119d1565b90506000356001600160e01b031990811690821614156107cf5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b0389166000818152600460209081529084902054835282015290810187905261080c88828888886119ed565b6108625760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016107c6565b6001600160a01b038816600090815260046020526040902054610886906001611ac9565b6001600160a01b03891660009081526004602090815260408083209390935591519091829130916108bb918c918e9101612e4c565b60408051601f19818403018152908290526108d591612e30565b6000604051808303816000865af19150503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b5091509150816109695760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016107c6565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161099c93929190612ef8565b60405180910390a19998505050505050505050565b826109cc6000805160206132868339815191526104e4611ad5565b6109e85760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316610a0c611ad5565b6001600160a01b031614610a325760405162461bcd60e51b81526004016107c69061305f565b600280541415610a845760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107c6565b6002805560008481526007602052604090206001015460ff1615610ae35760405162461bcd60e51b8152602060048201526016602482015275456c656374696f6e205374696c6c204163746976652160501b60448201526064016107c6565b6000848152600760205260408120600501546001600160a01b0316610b1457610b0d858585611b32565b9050610b22565b610b1f858585611dfa565b90505b600085815260076020908152604091829020600101805461ff0019166101008515150217905590518681527fb27761a3b9064636a27795816e4f8a8e5cadd6ac8b1e3a553bd47bf414c2b402910160405180910390a150506001600255505050565b600082815260208190526040902060010154610ba08133611eb7565b610baa8383611f1b565b505050565b6001600160a01b0381163314610c1f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107c6565b610c298282611f9f565b5050565b600081815260076020526040908190206005810154600491820154925163095ea7b360e01b8152309281019290925260248201929092526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190612a7b565b82610cf87f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def6104e4611ad5565b610d445760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016107c6565b610d50816105e2611ad5565b610d9c5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016107c6565b60008481526007602052604090206001015484908490849060ff16610dfa5760405162461bcd60e51b8152602060048201526014602482015273456c656374696f6e204e6f74204163746976652160601b60448201526064016107c6565b600083815260056020526040812090610e11611ad5565b6001600160a01b0316815260208101919091526040016000205460ff1615610e735760405162461bcd60e51b815260206004820152601560248201527453656e64657220616c726561647920766f7465642160581b60448201526064016107c6565b8151815114610ec45760405162461bcd60e51b815260206004820152601a60248201527f53636f726573202d2041646472657373204d69736d617463682100000000000060448201526064016107c6565b60005b8651811015610f9257600660008981526020019081526020016000206000888381518110610f0557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020868281518110610f4d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452928290208151610f7f9491909101929190910190612790565b5080610f8a816131e6565b915050610ec7565b506000878152600560205260408120600191610fac611ad5565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557faaf8175507b94c84621088891ecf31ca1c2548c0aeab2f2f21d3459515f9c4ed610ffd611ad5565b8888886040516110109493929190612f2d565b60405180910390a150505050505050565b60006001600160a01b0384166110445761103d86868585612004565b9050611054565b61105186868686866120ad565b90505b61105d82612174565b61106d611068611ad5565b6121e3565b7fc91fe4766a7a928d6625f66818425dc115b03c854a8ed8d28de2f34a684e0f1a611096611ad5565b604080516001600160a01b039092168252602082018490520160405180910390a195945050505050565b6000805b60008381526007602052604090206003015481101561116957600083815260076020526040812060030180548390811061110e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548683526005825260408084206001600160a01b039092168085529190925291205490915060ff16156111565782611152816131e6565b9350505b5080611161816131e6565b9150506110c4565b50919050565b60076020526000908152604090208054819061118a906131b1565b80601f01602080910402602001604051908101604052809291908181526020018280546111b6906131b1565b80156112035780601f106111d857610100808354040283529160200191611203565b820191906000526020600020905b8154815290600101906020018083116111e657829003601f168201915b50505060018401546002850154600486015460058701546006880154600790980154969760ff8086169861010090960416965092945090926001600160a01b0391821692911688565b6001546001600160a01b031633146112a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c6565b6112b060006121fb565b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b806112f66000805160206132868339815191526104e4611ad5565b6113125760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316611336611ad5565b6001600160a01b03161461135c5760405162461bcd60e51b81526004016107c69061305f565b6000828152600760205260409020600181015460ff166113be5760405162461bcd60e51b815260206004820152601760248201527f456c656374696f6e20416c726561647920456e6465642100000000000000000060448201526064016107c6565b60018101805460ff191690556040518381527f562cd572b2ba3b666cd989fc4ca98419ec81e75f04528df9d9d76fdb7807ee719060200160405180910390a1505050565b6006602052826000526040600020602052816000526040600020818154811061142a57600080fd5b9060005260206000200160009250925050508054611447906131b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611473906131b1565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b505050505081565b606080600080600080600080600080600760008c815260200190815260200160002060000180546114f8906131b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611524906131b1565b80156115715780601f1061154657610100808354040283529160200191611571565b820191906000526020600020905b81548152906001019060200180831161155457829003601f168201915b50505050509950600760008c81526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156115e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115c4575b50505050509850600760008c8152602001908152602001600020600301805490509750600760008c8152602001908152602001600020600201549650600760008c8152602001908152602001600020600401549550600760008c815260200190815260200160002060050160009054906101000a90046001600160a01b03169450600760008c8152602001908152602001600020600601549350600760008c815260200190815260200160002060070160009054906101000a90046001600160a01b03169250600760008c815260200190815260200160002060010160009054906101000a900460ff169150600760008c815260200190815260200160002060010160019054906101000a900460ff1690509193959799509193959799565b6000805b8281101561178457600080600080600089898781811061173557634e487b7160e01b600052603260045260246000fd5b90506020028101906117479190613096565b8101906117549190612993565b9450945094509450945061176b8585858585610735565b505050505050808061177c906131e6565b915050611705565b5060408051338152602081018490527fd761ebc8542bf9f4bc3e93954097f0ffcc1f3f42ef8410147a0d92c55059c93a910160405180910390a15060015b9392505050565b6000805b60008481526007602052604090206003015481101561185157600084815260076020526040812060030180548390811061181757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b039081169150841681141561183e57600192505b5080611849816131e6565b9150506117cd565b5092915050565b6000828152602081905260409020600101546118748133611eb7565b610baa8383611f9f565b6000805b6000848152600760205260409020600301548110156118515760008481526007602052604090206003018054829081106118cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156118f45760019150611851565b806118fe816131e6565b915050611882565b6001546001600160a01b031633146119605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c6565b6001600160a01b0381166119c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c6565b6119ce816121fb565b50565b60008151600014156119e557506000919050565b506020015190565b6000806001611a036119fe8861224d565b6122ca565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015611a51573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611aa85760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016107c6565b866001600160a01b0316816001600160a01b03161491505095945050505050565b60006117c28284613137565b600033301415611b2c57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611b2f9050565b50335b90565b600083611b4f6000805160206132868339815191526104e4611ad5565b611b6b5760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316611b8f611ad5565b6001600160a01b031614611bb55760405162461bcd60e51b81526004016107c69061305f565b6000805b600087815260076020526040902060030154811015611ce157858181518110611bf257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316600760008981526020019081526020016000206003018281548110611c3857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614611c9a5760405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2d41646472657373204d69736d617463682100000000000060448201526064016107c6565b848181518110611cba57634e487b7160e01b600052603260045260246000fd5b602002602001015182611ccd9190613137565b915080611cd9816131e6565b915050611bb9565b5060005b8451811015611ded57600080878381518110611d1157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316878481518110611d4257634e487b7160e01b600052603260045260246000fd5b602002602001015160405160006040518083038185875af1925050503d8060008114611d8a576040519150601f19603f3d011682016040523d82523d6000602084013e611d8f565b606091505b509150915081611dd85760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016107c6565b50508080611de5906131e6565b915050611ce5565b5060019695505050505050565b6000805b600085815260076020526040902060030154811015611eac57611e9a611e22611ad5565b858381518110611e4257634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110611e6a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008a815260079092526040909120600501546001600160a01b03169291906122fa565b80611ea4816131e6565b915050611dfe565b506001949350505050565b611ec182826112b2565b610c2957611ed9816001600160a01b0316601461235a565b611ee483602061235a565b604051602001611ef5929190612e83565b60408051601f198184030181529082905262461bcd60e51b82526107c691600401612f79565b611f2582826112b2565b610c29576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611f5b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fa982826112b2565b15610c29576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6008805460009182612015836131e6565b90915550600081815260076020908152604090912087519293509161203f91839190890190612790565b50600481018590556006810184905582516120639060038301906020860190612814565b504260028201556001808201805460ff19169091179055612082611ad5565b60079190910180546001600160a01b0319166001600160a01b03909216919091179055949350505050565b60088054600091826120be836131e6565b9091555060008181526007602090815260409091208851929350916120e8918391908a0190612790565b50600481018690556005810180546001600160a01b0319166001600160a01b0387161790556006810184905582516121299060038301906020860190612814565b504260028201556001808201805460ff19169091179055612148611ad5565b60079190910180546001600160a01b0319166001600160a01b0390921691909117905595945050505050565b60005b8151811015610c29576121d17f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def8383815181106121c457634e487b7160e01b600052603260045260246000fd5b602002602001015161253c565b806121db816131e6565b915050612177565b6119ce6000805160206132868339815191528261253c565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060405180608001604052806043815260200161324360439139805160209182012083518483015160408087015180519086012090516122ad950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60006122d560035490565b60405161190160f01b60208201526022810191909152604281018390526062016122ad565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612354908590612546565b50505050565b6060600061236983600261314f565b612374906002613137565b67ffffffffffffffff81111561239a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123c4576020820181803683370190505b509050600360fc1b816000815181106123ed57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061242a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061244e84600261314f565b612459906001613137565b90505b60018111156124ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061249b57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124e68161319a565b905061245c565b5083156117c25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107c6565b610c298282611f1b565b600061259b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126189092919063ffffffff16565b805190915015610baa57808060200190518101906125b99190612a7b565b610baa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c6565b6060612627848460008561262f565b949350505050565b6060824710156126905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107c6565b843b6126de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c6565b600080866001600160a01b031685876040516126fa9190612e30565b60006040518083038185875af1925050503d8060008114612737576040519150601f19603f3d011682016040523d82523d6000602084013e61273c565b606091505b509150915061274c828286612757565b979650505050505050565b606083156127665750816117c2565b8251156127765782518084602001fd5b8160405162461bcd60e51b81526004016107c69190612f79565b82805461279c906131b1565b90600052602060002090601f0160209004810192826127be5760008555612804565b82601f106127d757805160ff1916838001178555612804565b82800160010185558215612804579182015b828111156128045782518255916020019190600101906127e9565b50612810929150612869565b5090565b828054828255906000526020600020908101928215612804579160200282015b8281111561280457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612834565b5b80821115612810576000815560010161286a565b600082601f83011261288e578081fd5b813560206128a361289e83613113565b6130e2565b80838252828201915082860187848660051b89010111156128c2578586fd5b855b858110156128e95781356128d78161322d565b845292840192908401906001016128c4565b5090979650505050505050565b600082601f830112612906578081fd5b813567ffffffffffffffff81111561292057612920613217565b612933601f8201601f19166020016130e2565b818152846020838601011115612947578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461297257600080fd5b919050565b600060208284031215612988578081fd5b81356117c28161322d565b600080600080600060a086880312156129aa578081fd5b85356129b58161322d565b9450602086013567ffffffffffffffff8111156129d0578182fd5b6129dc888289016128f6565b94505060408601359250606086013591506129f960808701612961565b90509295509295909350565b600080600060408486031215612a19578283fd5b833567ffffffffffffffff80821115612a30578485fd5b818601915086601f830112612a43578485fd5b813581811115612a51578586fd5b8760208260051b8501011115612a65578586fd5b6020928301989097509590910135949350505050565b600060208284031215612a8c578081fd5b815180151581146117c2578182fd5b600060208284031215612aac578081fd5b5035919050565b60008060408385031215612ac5578182fd5b823591506020830135612ad78161322d565b809150509250929050565b600060208284031215612af3578081fd5b81356001600160e01b0319811681146117c2578182fd5b600080600080600060a08688031215612b21578283fd5b853567ffffffffffffffff80821115612b38578485fd5b612b4489838a016128f6565b96506020880135955060408801359150612b5d8261322d565b9093506060870135925060808701359080821115612b79578283fd5b50612b868882890161287e565b9150509295509295909350565b600080600060608486031215612ba7578081fd5b833592506020840135612bb98161322d565b929592945050506040919091013590565b600080600060608486031215612bde578081fd5b8335925060208085013567ffffffffffffffff80821115612bfd578384fd5b612c098883890161287e565b94506040870135915080821115612c1e578384fd5b818701915087601f830112612c31578384fd5b8135612c3f61289e82613113565b8082825285820191508585018b878560051b8801011115612c5e578788fd5b875b84811015612c9757813586811115612c7657898afd5b612c848e8a838b01016128f6565b8552509287019290870190600101612c60565b50508096505050505050509250925092565b600080600060608486031215612cbd578081fd5b8335925060208085013567ffffffffffffffff80821115612cdc578384fd5b612ce88883890161287e565b94506040870135915080821115612cfd578384fd5b508501601f81018713612d0e578283fd5b8035612d1c61289e82613113565b8082825284820191508484018a868560051b8701011115612d3b578687fd5b8694505b83851015612d5d578035835260019490940193918501918501612d3f565b5080955050505050509250925092565b6000815180845260208085019450808401835b83811015612da55781516001600160a01b031687529582019590820190600101612d80565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b85811015612df7578284038952612de5848351612e04565b98850198935090840190600101612dcd565b5091979650505050505050565b60008151808452612e1c81602086016020860161316e565b601f01601f19169290920160200192915050565b60008251612e4281846020870161316e565b9190910192915050565b60008351612e5e81846020880161316e565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ebb81601785016020880161316e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612eec81602884016020880161316e565b01602801949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090612f2490830184612e04565b95945050505050565b60018060a01b0385168152836020820152608060408201526000612f546080830185612d6d565b828103606084015261274c8185612db0565b6020815260006117c26020830184612db0565b6020815260006117c26020830184612e04565b6000610140808352612fa08184018e612e04565b90508281036020840152612fb4818d612d6d565b604084019b909b525050606081019790975260808701959095526001600160a01b0393841660a087015260c086019290925290911660e0840152151561010083015215156101209091015292915050565b60006101008083526130198184018c612e04565b991515602084015250509515156040870152606086019490945260808501929092526001600160a01b0390811660a085015260c08401919091521660e090910152919050565b6020808252601a908201527f53656e646572206e6f7420456c656374696f6e2041646d696e21000000000000604082015260600190565b6000808335601e198436030181126130ac578283fd5b83018035915067ffffffffffffffff8211156130c6578283fd5b6020019150368190038213156130db57600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561310b5761310b613217565b604052919050565b600067ffffffffffffffff82111561312d5761312d613217565b5060051b60200190565b6000821982111561314a5761314a613201565b500190565b600081600019048311821515161561316957613169613201565b500290565b60005b83811015613189578181015183820152602001613171565b838111156123545750506000910152565b6000816131a9576131a9613201565b506000190190565b600181811c908216806131c557607f821691505b6020821081141561116957634e487b7160e01b600052602260045260246000fd5b60006000198214156131fa576131fa613201565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119ce57600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e61747572652916f50c1fe196fa8f2d59c3eca367f2f7bf83b35c12ed36436b26d5af3695f5c4a2646970667358221220b40996bc56d09cb0373488c28daba7d96e496023e9f0f343879014186e6e52f264736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429","deployedBytecode":"0x6080604052600436106101ae5760003560e01c80635e6fef01116100eb578063a217fddf1161008f578063cdb2867b11610061578063cdb2867b14610587578063d547741f146105a7578063ea3c6cde146105c7578063f2fde38b146105e757005b8063a217fddf14610509578063b082c3851461051e578063c6958b121461053e578063c71bad6e1461057457005b80638da5cb5b116100c85780638da5cb5b1461046057806391b84f161461048857806391d14854146104c95780639c98bcbb146104e957005b80635e6fef01146104015780636e38d9bd14610435578063715018a61461044b57005b806336568abe116101525780634548e52b1161012f5780634548e52b146103665780634b8b477e146103865780635277b4ae146103a657806352e968ad146103e157005b806336568abe146102e05780633ac9fc1114610300578063438596321461032057005b80630ece86d01161018b5780630ece86d014610239578063248a9ca31461024c5780632d0335ab1461028a5780632f2ff15d146102c057005b806301ffc9a7146101b757806308108288146101ec5780630c53c51c1461021957005b366101b557005b005b3480156101c357600080fd5b506101d76101d2366004612ae2565b610607565b60405190151581526020015b60405180910390f35b3480156101f857600080fd5b5061020c610207366004612ab3565b61063e565b6040516101e39190612f66565b61022c610227366004612993565b610735565b6040516101e39190612f79565b6101b5610247366004612ca9565b6109b1565b34801561025857600080fd5b5061027c610267366004612a9b565b60009081526020819052604090206001015490565b6040519081526020016101e3565b34801561029657600080fd5b5061027c6102a5366004612977565b6001600160a01b031660009081526004602052604090205490565b3480156102cc57600080fd5b506101b56102db366004612ab3565b610b84565b3480156102ec57600080fd5b506101b56102fb366004612ab3565b610baf565b34801561030c57600080fd5b506101b561031b366004612a9b565b610c2d565b34801561032c57600080fd5b506101d761033b366004612ab3565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561037257600080fd5b506101b5610381366004612bca565b610ccb565b34801561039257600080fd5b5061027c6103a1366004612b0a565b611021565b3480156103b257600080fd5b506101d76103c1366004612ab3565b600560209081526000928352604080842090915290825290205460ff1681565b3480156103ed57600080fd5b5061027c6103fc366004612a9b565b6110c0565b34801561040d57600080fd5b5061042161041c366004612a9b565b61116f565b6040516101e3989796959493929190613005565b34801561044157600080fd5b5061027c60085481565b34801561045757600080fd5b506101b561124c565b34801561046c57600080fd5b506001546040516001600160a01b0390911681526020016101e3565b34801561049457600080fd5b506101d76104a3366004612ab3565b6000918252600760208190526040909220909101546001600160a01b0390811691161490565b3480156104d557600080fd5b506101d76104e4366004612ab3565b6112b2565b3480156104f557600080fd5b506101b5610504366004612a9b565b6112db565b34801561051557600080fd5b5061027c600081565b34801561052a57600080fd5b5061022c610539366004612b93565b611402565b34801561054a57600080fd5b5061055e610559366004612a9b565b6114c8565b6040516101e39a99989796959493929190612f8c565b6101d7610582366004612a05565b611701565b34801561059357600080fd5b506101d76105a2366004612ab3565b6117c9565b3480156105b357600080fd5b506101b56105c2366004612ab3565b611858565b3480156105d357600080fd5b506101d76105e2366004612ab3565b61187e565b3480156105f357600080fd5b506101b5610602366004612977565b611906565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526006602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b8282101561072957838290600052602060002001805461069c906131b1565b80601f01602080910402602001604051908101604052809291908181526020018280546106c8906131b1565b80156107155780601f106106ea57610100808354040283529160200191610715565b820191906000526020600020905b8154815290600101906020018083116106f857829003601f168201915b50505050508152602001906001019061067d565b50505050905092915050565b60606000610742866119d1565b90506000356001600160e01b031990811690821614156107cf5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b0389166000818152600460209081529084902054835282015290810187905261080c88828888886119ed565b6108625760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016107c6565b6001600160a01b038816600090815260046020526040902054610886906001611ac9565b6001600160a01b03891660009081526004602090815260408083209390935591519091829130916108bb918c918e9101612e4c565b60408051601f19818403018152908290526108d591612e30565b6000604051808303816000865af19150503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b5091509150816109695760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016107c6565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161099c93929190612ef8565b60405180910390a19998505050505050505050565b826109cc6000805160206132868339815191526104e4611ad5565b6109e85760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316610a0c611ad5565b6001600160a01b031614610a325760405162461bcd60e51b81526004016107c69061305f565b600280541415610a845760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107c6565b6002805560008481526007602052604090206001015460ff1615610ae35760405162461bcd60e51b8152602060048201526016602482015275456c656374696f6e205374696c6c204163746976652160501b60448201526064016107c6565b6000848152600760205260408120600501546001600160a01b0316610b1457610b0d858585611b32565b9050610b22565b610b1f858585611dfa565b90505b600085815260076020908152604091829020600101805461ff0019166101008515150217905590518681527fb27761a3b9064636a27795816e4f8a8e5cadd6ac8b1e3a553bd47bf414c2b402910160405180910390a150506001600255505050565b600082815260208190526040902060010154610ba08133611eb7565b610baa8383611f1b565b505050565b6001600160a01b0381163314610c1f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107c6565b610c298282611f9f565b5050565b600081815260076020526040908190206005810154600491820154925163095ea7b360e01b8152309281019290925260248201929092526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190612a7b565b82610cf87f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def6104e4611ad5565b610d445760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016107c6565b610d50816105e2611ad5565b610d9c5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206e6f7420456c656374696f6e2043616e64696461746521000060448201526064016107c6565b60008481526007602052604090206001015484908490849060ff16610dfa5760405162461bcd60e51b8152602060048201526014602482015273456c656374696f6e204e6f74204163746976652160601b60448201526064016107c6565b600083815260056020526040812090610e11611ad5565b6001600160a01b0316815260208101919091526040016000205460ff1615610e735760405162461bcd60e51b815260206004820152601560248201527453656e64657220616c726561647920766f7465642160581b60448201526064016107c6565b8151815114610ec45760405162461bcd60e51b815260206004820152601a60248201527f53636f726573202d2041646472657373204d69736d617463682100000000000060448201526064016107c6565b60005b8651811015610f9257600660008981526020019081526020016000206000888381518110610f0557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020868281518110610f4d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452928290208151610f7f9491909101929190910190612790565b5080610f8a816131e6565b915050610ec7565b506000878152600560205260408120600191610fac611ad5565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557faaf8175507b94c84621088891ecf31ca1c2548c0aeab2f2f21d3459515f9c4ed610ffd611ad5565b8888886040516110109493929190612f2d565b60405180910390a150505050505050565b60006001600160a01b0384166110445761103d86868585612004565b9050611054565b61105186868686866120ad565b90505b61105d82612174565b61106d611068611ad5565b6121e3565b7fc91fe4766a7a928d6625f66818425dc115b03c854a8ed8d28de2f34a684e0f1a611096611ad5565b604080516001600160a01b039092168252602082018490520160405180910390a195945050505050565b6000805b60008381526007602052604090206003015481101561116957600083815260076020526040812060030180548390811061110e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548683526005825260408084206001600160a01b039092168085529190925291205490915060ff16156111565782611152816131e6565b9350505b5080611161816131e6565b9150506110c4565b50919050565b60076020526000908152604090208054819061118a906131b1565b80601f01602080910402602001604051908101604052809291908181526020018280546111b6906131b1565b80156112035780601f106111d857610100808354040283529160200191611203565b820191906000526020600020905b8154815290600101906020018083116111e657829003601f168201915b50505060018401546002850154600486015460058701546006880154600790980154969760ff8086169861010090960416965092945090926001600160a01b0391821692911688565b6001546001600160a01b031633146112a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c6565b6112b060006121fb565b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b806112f66000805160206132868339815191526104e4611ad5565b6113125760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316611336611ad5565b6001600160a01b03161461135c5760405162461bcd60e51b81526004016107c69061305f565b6000828152600760205260409020600181015460ff166113be5760405162461bcd60e51b815260206004820152601760248201527f456c656374696f6e20416c726561647920456e6465642100000000000000000060448201526064016107c6565b60018101805460ff191690556040518381527f562cd572b2ba3b666cd989fc4ca98419ec81e75f04528df9d9d76fdb7807ee719060200160405180910390a1505050565b6006602052826000526040600020602052816000526040600020818154811061142a57600080fd5b9060005260206000200160009250925050508054611447906131b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611473906131b1565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b505050505081565b606080600080600080600080600080600760008c815260200190815260200160002060000180546114f8906131b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611524906131b1565b80156115715780601f1061154657610100808354040283529160200191611571565b820191906000526020600020905b81548152906001019060200180831161155457829003601f168201915b50505050509950600760008c81526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156115e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115c4575b50505050509850600760008c8152602001908152602001600020600301805490509750600760008c8152602001908152602001600020600201549650600760008c8152602001908152602001600020600401549550600760008c815260200190815260200160002060050160009054906101000a90046001600160a01b03169450600760008c8152602001908152602001600020600601549350600760008c815260200190815260200160002060070160009054906101000a90046001600160a01b03169250600760008c815260200190815260200160002060010160009054906101000a900460ff169150600760008c815260200190815260200160002060010160019054906101000a900460ff1690509193959799509193959799565b6000805b8281101561178457600080600080600089898781811061173557634e487b7160e01b600052603260045260246000fd5b90506020028101906117479190613096565b8101906117549190612993565b9450945094509450945061176b8585858585610735565b505050505050808061177c906131e6565b915050611705565b5060408051338152602081018490527fd761ebc8542bf9f4bc3e93954097f0ffcc1f3f42ef8410147a0d92c55059c93a910160405180910390a15060015b9392505050565b6000805b60008481526007602052604090206003015481101561185157600084815260076020526040812060030180548390811061181757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b039081169150841681141561183e57600192505b5080611849816131e6565b9150506117cd565b5092915050565b6000828152602081905260409020600101546118748133611eb7565b610baa8383611f9f565b6000805b6000848152600760205260409020600301548110156118515760008481526007602052604090206003018054829081106118cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03848116911614156118f45760019150611851565b806118fe816131e6565b915050611882565b6001546001600160a01b031633146119605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c6565b6001600160a01b0381166119c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c6565b6119ce816121fb565b50565b60008151600014156119e557506000919050565b506020015190565b6000806001611a036119fe8861224d565b6122ca565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015611a51573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611aa85760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016107c6565b866001600160a01b0316816001600160a01b03161491505095945050505050565b60006117c28284613137565b600033301415611b2c57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611b2f9050565b50335b90565b600083611b4f6000805160206132868339815191526104e4611ad5565b611b6b5760405162461bcd60e51b81526004016107c69061305f565b600081815260076020819052604090912001546001600160a01b0316611b8f611ad5565b6001600160a01b031614611bb55760405162461bcd60e51b81526004016107c69061305f565b6000805b600087815260076020526040902060030154811015611ce157858181518110611bf257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316600760008981526020019081526020016000206003018281548110611c3857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614611c9a5760405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2d41646472657373204d69736d617463682100000000000060448201526064016107c6565b848181518110611cba57634e487b7160e01b600052603260045260246000fd5b602002602001015182611ccd9190613137565b915080611cd9816131e6565b915050611bb9565b5060005b8451811015611ded57600080878381518110611d1157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316878481518110611d4257634e487b7160e01b600052603260045260246000fd5b602002602001015160405160006040518083038185875af1925050503d8060008114611d8a576040519150601f19603f3d011682016040523d82523d6000602084013e611d8f565b606091505b509150915081611dd85760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016107c6565b50508080611de5906131e6565b915050611ce5565b5060019695505050505050565b6000805b600085815260076020526040902060030154811015611eac57611e9a611e22611ad5565b858381518110611e4257634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110611e6a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008a815260079092526040909120600501546001600160a01b03169291906122fa565b80611ea4816131e6565b915050611dfe565b506001949350505050565b611ec182826112b2565b610c2957611ed9816001600160a01b0316601461235a565b611ee483602061235a565b604051602001611ef5929190612e83565b60408051601f198184030181529082905262461bcd60e51b82526107c691600401612f79565b611f2582826112b2565b610c29576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611f5b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fa982826112b2565b15610c29576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6008805460009182612015836131e6565b90915550600081815260076020908152604090912087519293509161203f91839190890190612790565b50600481018590556006810184905582516120639060038301906020860190612814565b504260028201556001808201805460ff19169091179055612082611ad5565b60079190910180546001600160a01b0319166001600160a01b03909216919091179055949350505050565b60088054600091826120be836131e6565b9091555060008181526007602090815260409091208851929350916120e8918391908a0190612790565b50600481018690556005810180546001600160a01b0319166001600160a01b0387161790556006810184905582516121299060038301906020860190612814565b504260028201556001808201805460ff19169091179055612148611ad5565b60079190910180546001600160a01b0319166001600160a01b0390921691909117905595945050505050565b60005b8151811015610c29576121d17f9096faa56698daa37ec8d3542ff829c66d5e81213bd6faab8ba4e9ce824a5def8383815181106121c457634e487b7160e01b600052603260045260246000fd5b602002602001015161253c565b806121db816131e6565b915050612177565b6119ce6000805160206132868339815191528261253c565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060405180608001604052806043815260200161324360439139805160209182012083518483015160408087015180519086012090516122ad950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60006122d560035490565b60405161190160f01b60208201526022810191909152604281018390526062016122ad565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612354908590612546565b50505050565b6060600061236983600261314f565b612374906002613137565b67ffffffffffffffff81111561239a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123c4576020820181803683370190505b509050600360fc1b816000815181106123ed57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061242a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061244e84600261314f565b612459906001613137565b90505b60018111156124ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061249b57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124e68161319a565b905061245c565b5083156117c25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107c6565b610c298282611f1b565b600061259b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126189092919063ffffffff16565b805190915015610baa57808060200190518101906125b99190612a7b565b610baa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c6565b6060612627848460008561262f565b949350505050565b6060824710156126905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107c6565b843b6126de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c6565b600080866001600160a01b031685876040516126fa9190612e30565b60006040518083038185875af1925050503d8060008114612737576040519150601f19603f3d011682016040523d82523d6000602084013e61273c565b606091505b509150915061274c828286612757565b979650505050505050565b606083156127665750816117c2565b8251156127765782518084602001fd5b8160405162461bcd60e51b81526004016107c69190612f79565b82805461279c906131b1565b90600052602060002090601f0160209004810192826127be5760008555612804565b82601f106127d757805160ff1916838001178555612804565b82800160010185558215612804579182015b828111156128045782518255916020019190600101906127e9565b50612810929150612869565b5090565b828054828255906000526020600020908101928215612804579160200282015b8281111561280457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612834565b5b80821115612810576000815560010161286a565b600082601f83011261288e578081fd5b813560206128a361289e83613113565b6130e2565b80838252828201915082860187848660051b89010111156128c2578586fd5b855b858110156128e95781356128d78161322d565b845292840192908401906001016128c4565b5090979650505050505050565b600082601f830112612906578081fd5b813567ffffffffffffffff81111561292057612920613217565b612933601f8201601f19166020016130e2565b818152846020838601011115612947578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461297257600080fd5b919050565b600060208284031215612988578081fd5b81356117c28161322d565b600080600080600060a086880312156129aa578081fd5b85356129b58161322d565b9450602086013567ffffffffffffffff8111156129d0578182fd5b6129dc888289016128f6565b94505060408601359250606086013591506129f960808701612961565b90509295509295909350565b600080600060408486031215612a19578283fd5b833567ffffffffffffffff80821115612a30578485fd5b818601915086601f830112612a43578485fd5b813581811115612a51578586fd5b8760208260051b8501011115612a65578586fd5b6020928301989097509590910135949350505050565b600060208284031215612a8c578081fd5b815180151581146117c2578182fd5b600060208284031215612aac578081fd5b5035919050565b60008060408385031215612ac5578182fd5b823591506020830135612ad78161322d565b809150509250929050565b600060208284031215612af3578081fd5b81356001600160e01b0319811681146117c2578182fd5b600080600080600060a08688031215612b21578283fd5b853567ffffffffffffffff80821115612b38578485fd5b612b4489838a016128f6565b96506020880135955060408801359150612b5d8261322d565b9093506060870135925060808701359080821115612b79578283fd5b50612b868882890161287e565b9150509295509295909350565b600080600060608486031215612ba7578081fd5b833592506020840135612bb98161322d565b929592945050506040919091013590565b600080600060608486031215612bde578081fd5b8335925060208085013567ffffffffffffffff80821115612bfd578384fd5b612c098883890161287e565b94506040870135915080821115612c1e578384fd5b818701915087601f830112612c31578384fd5b8135612c3f61289e82613113565b8082825285820191508585018b878560051b8801011115612c5e578788fd5b875b84811015612c9757813586811115612c7657898afd5b612c848e8a838b01016128f6565b8552509287019290870190600101612c60565b50508096505050505050509250925092565b600080600060608486031215612cbd578081fd5b8335925060208085013567ffffffffffffffff80821115612cdc578384fd5b612ce88883890161287e565b94506040870135915080821115612cfd578384fd5b508501601f81018713612d0e578283fd5b8035612d1c61289e82613113565b8082825284820191508484018a868560051b8701011115612d3b578687fd5b8694505b83851015612d5d578035835260019490940193918501918501612d3f565b5080955050505050509250925092565b6000815180845260208085019450808401835b83811015612da55781516001600160a01b031687529582019590820190600101612d80565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b85811015612df7578284038952612de5848351612e04565b98850198935090840190600101612dcd565b5091979650505050505050565b60008151808452612e1c81602086016020860161316e565b601f01601f19169290920160200192915050565b60008251612e4281846020870161316e565b9190910192915050565b60008351612e5e81846020880161316e565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ebb81601785016020880161316e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612eec81602884016020880161316e565b01602801949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090612f2490830184612e04565b95945050505050565b60018060a01b0385168152836020820152608060408201526000612f546080830185612d6d565b828103606084015261274c8185612db0565b6020815260006117c26020830184612db0565b6020815260006117c26020830184612e04565b6000610140808352612fa08184018e612e04565b90508281036020840152612fb4818d612d6d565b604084019b909b525050606081019790975260808701959095526001600160a01b0393841660a087015260c086019290925290911660e0840152151561010083015215156101209091015292915050565b60006101008083526130198184018c612e04565b991515602084015250509515156040870152606086019490945260808501929092526001600160a01b0390811660a085015260c08401919091521660e090910152919050565b6020808252601a908201527f53656e646572206e6f7420456c656374696f6e2041646d696e21000000000000604082015260600190565b6000808335601e198436030181126130ac578283fd5b83018035915067ffffffffffffffff8211156130c6578283fd5b6020019150368190038213156130db57600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561310b5761310b613217565b604052919050565b600067ffffffffffffffff82111561312d5761312d613217565b5060051b60200190565b6000821982111561314a5761314a613201565b500190565b600081600019048311821515161561316957613169613201565b500290565b60005b83811015613189578181015183820152602001613171565b838111156123545750506000910152565b6000816131a9576131a9613201565b506000190190565b600181811c908216806131c557607f821691505b6020821081141561116957634e487b7160e01b600052602260045260246000fd5b60006000198214156131fa576131fa613201565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119ce57600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e61747572652916f50c1fe196fa8f2d59c3eca367f2f7bf83b35c12ed36436b26d5af3695f5c4a2646970667358221220b40996bc56d09cb0373488c28daba7d96e496023e9f0f343879014186e6e52f264736f6c63430008040033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"uint256","name":"electionId","type":"uint256"},{"indexed":false,"internalType":"address[]","name":"adrs","type":"address[]"},{"indexed":false,"internalType":"string[]","name":"scores","type":"string[]"}],"name":"BallotCast","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"functionCalls","type":"uint256"}],"name":"BatchMetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"ElectionCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"ElectionEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"ElectionPaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"functionSignature","type":"bytes"}],"name":"MetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"approveToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"canVote","outputs":[{"internalType":"bool","name":"status","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address[]","name":"_adrs","type":"address[]"},{"internalType":"string[]","name":"_scores","type":"string[]"}],"name":"castBallot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"elections","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"bool","name":"paid","type":"bool"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"funds","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"votes","type":"uint256"},{"internalType":"address","name":"admin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"endElection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"mtx","type":"bytes[]"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"executeBatchMetaTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"bytes","name":"functionSignature","type":"bytes"},{"internalType":"bytes32","name":"sigR","type":"bytes32"},{"internalType":"bytes32","name":"sigS","type":"bytes32"},{"internalType":"uint8","name":"sigV","type":"uint8"}],"name":"executeMetaTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"getElectionById","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address[]","name":"candidates","type":"address[]"},{"internalType":"uint256","name":"n_addr","type":"uint256"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"funds","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"votes","type":"uint256"},{"internalType":"address","name":"admin","type":"address"},{"internalType":"bool","name":"isActive","type":"bool"},{"internalType":"bool","name":"paid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address","name":"_adr","type":"address"}],"name":"getElectionScores","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"}],"name":"getElectionVoted","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"hasVoted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isElectionAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isElectionCandidate","outputs":[{"internalType":"bool","name":"status","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_funds","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_votes","type":"uint256"},{"internalType":"address[]","name":"_adrs","type":"address[]"}],"name":"newElection","outputs":[{"internalType":"uint256","name":"electionId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numElections","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"address[]","name":"_adrs","type":"address[]"},{"internalType":"uint256[]","name":"_pay","type":"uint256[]"}],"name":"payoutElection","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"scores","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"voted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}